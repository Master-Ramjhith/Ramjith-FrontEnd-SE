{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smscp\\\\Desktop\\\\Ram\\\\PESU 5th sem Project\\\\SE project\\\\src\\\\ResumeAnalyzer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useRef, useState, useCallback } from \"react\";\n\n// --- Configuration Constants (Centralized and Descriptive) ---\n\n// Section definitions for robust parsing using regex. Added 'Awards' and made regexes slightly more robust.\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RESUME_SECTIONS = {\n  contact: /\\b(contact|email|phone|linkedin|github|address)\\b/i,\n  summary: /\\b(summary|objective|profile|professional summary)\\b/i,\n  experience: /\\b(experience|work experience|employment|career|professional history)\\b/i,\n  skills: /\\b(skills|technical skills|competencies|technologies|tools)\\b/i,\n  education: /\\b(education|degree|university|college|academic history)\\b/i,\n  projects: /\\b(projects?|portfolio|personal projects?)\\b/i,\n  certifications: /\\b(certifications?|certificates?|license|licensed?)\\b/i,\n  awards: /\\b(awards|honors|achievements)\\b/i\n};\n\n// Core sections for scoring (must-haves)\nconst CORE_SECTIONS = [\"contact\", \"summary\", \"experience\", \"skills\", \"education\"];\n\n// Template definitions for styling\nexport const RESUME_TEMPLATES = {\n  modern: {\n    id: 'modern',\n    name: \"Modern Professional\",\n    className: \"theme-modern\",\n    fontStack: \"ui-sans-serif, system-ui, Segoe UI, Arial\"\n  },\n  minimal: {\n    id: 'minimal',\n    name: \"Minimal Clean\",\n    className: \"theme-minimal\",\n    fontStack: \"Arial, Helvetica, sans-serif\"\n  },\n  creative: {\n    id: 'creative',\n    name: \"Creative Bold\",\n    className: \"theme-creative\",\n    fontStack: \"Helvetica, Arial, sans-serif\"\n  }\n};\n\n// Stopwords used for cleaner keyword extraction from the JD (extended for better precision)\nconst STOPWORDS = new Set([\"and\", \"the\", \"with\", \"from\", \"that\", \"this\", \"your\", \"their\", \"our\", \"for\", \"into\", \"able\", \"will\", \"shall\", \"must\", \"have\", \"has\", \"had\", \"are\", \"was\", \"were\", \"you\", \"they\", \"them\", \"over\", \"under\", \"about\", \"above\", \"below\", \"not\", \"only\", \"but\", \"also\", \"more\", \"than\", \"such\", \"etc\", \"using\", \"use\", \"used\", \"strong\", \"good\", \"great\", \"work\", \"role\", \"team\", \"skills\", \"requirements\", \"responsibilities\", \"job\", \"description\", \"looking\", \"plus\", \"preferred\", \"required\", \"experience\", \"years\", \"year\", \"developer\", \"engineer\", \"data\", \"to\", \"a\", \"an\", \"is\", \"of\", \"in\", \"it\", \"at\", \"by\", \"be\", \"as\", \"or\"]);\n\n// Weak words that penalize the formatting/vocabulary score (action verb detection)\nconst WEAK_WORDS = [\"responsible for\", \"managed\", \"worked on\", \"assisted\", \"duties included\", \"had to\", \"developed a\", \"was involved in\", \"my main task was\"];\n\n// --- Utility Functions ---\n\n/** Extracts unique, relevant keywords from text, ignoring common stopwords. */\nfunction extractKeywords(text) {\n  return [...new Set(text.toLowerCase().split(/[^a-z0-9+#.]/i).map(w => w.trim()).filter(w => w.length > 2 && !STOPWORDS.has(w)))];\n}\n\n/** Finds the first non-empty line to use as the candidate name. */\nfunction firstNonEmptyLine(s) {\n  return (s || \"\").split(/\\r?\\n/).map(x => x.trim()).find(x => x.length > 0) || \"Candidate Name\";\n}\n\n/** Escapes special HTML characters to prevent XSS in dangerouslySetInnerHTML. */\nfunction escapeHTML(s) {\n  return s.replaceAll(\"&\", \"&amp;\").replaceAll(\"<\", \"&lt;\").replaceAll(\">\", \"&gt;\").replaceAll('\"', '&quot;').replaceAll(\"'\", '&#39;');\n}\n\n/** Converts plain text resume content into structured HTML for template rendering. */\nfunction plainToHTML(resumeText) {\n  const lines = (resumeText || \"\").split(/\\r?\\n/).map(line => line.trim()).filter(line => line.length > 0);\n  let htmlOutput = \"\";\n  let inList = false;\n  lines.forEach(trimmed => {\n    // Check if the line looks like a standard resume section heading\n    const isHeading = Object.values(RESUME_SECTIONS).some(r => r.test(trimmed));\n\n    // Check if the line looks like a bullet point (starts with '-', '*', '•', or digit followed by space)\n    const isBullet = trimmed.match(/^[-*•\\d]\\s/);\n    // Remove bullet/numbering symbol before escaping content\n    const safeContent = escapeHTML(trimmed.replace(/^[-*•\\d.]+\\s*/, ''));\n    if (isHeading) {\n      // Close list if we hit a heading and were in a list\n      if (inList) htmlOutput += \"</ul>\\n\";\n      inList = false;\n      // Use RESUME_SECTIONS keys to correctly identify and format the heading if needed, but for now just use the content\n      htmlOutput += `<h2 class=\"section-heading\">${safeContent}</h2>\\n`;\n    } else if (isBullet) {\n      // Start list if not already in one\n      if (!inList) htmlOutput += \"<ul>\\n\";\n      inList = true;\n      htmlOutput += `<li>${safeContent}</li>\\n`;\n    } else {\n      // Close list if we hit a normal paragraph and were in a list\n      if (inList) htmlOutput += \"</ul>\\n\";\n      inList = false;\n      htmlOutput += `<p>${safeContent}</p>\\n`;\n    }\n  });\n\n  // Ensure the last list is closed if the resume ends with a list\n  if (inList) htmlOutput += \"</ul>\\n\";\n  return htmlOutput;\n}\n\n/** Calculates the ATS score based on completeness, keyword match, and formatting. */\nfunction calculateATSScore(resumeText, jobDescription) {\n  const found = {};\n  const missing = [];\n  const resumeLower = resumeText.toLowerCase();\n\n  // Score Weights: Completeness (40%), Keywords (30%), Formatting (30%)\n  const WEIGHT_STRUCTURE = 40;\n  const WEIGHT_KEYWORD = 30;\n  const WEIGHT_FORMATTING = 30;\n  const MAX_WEAK_WORD_PENALTY = 15; // Max 5 * 3 = 15 points\n\n  // 1. Completeness (40%)\n  Object.entries(RESUME_SECTIONS).forEach(([k, rgx]) => {\n    const isFound = rgx.test(resumeLower);\n    if (isFound) found[k] = true;else if (CORE_SECTIONS.includes(k)) missing.push(k); // Only check for core sections\n  });\n  const coreFoundCount = CORE_SECTIONS.length - missing.length;\n  // Score based on the ratio of found core sections\n  const structureScore = Math.round(coreFoundCount / CORE_SECTIONS.length * WEIGHT_STRUCTURE);\n\n  // 2. Keywords (30%) - JD matching\n  const jdKeys = extractKeywords(jobDescription);\n  const matched = jdKeys.filter(k => resumeLower.includes(k));\n  // Prevents division by zero if JD is empty, setting score to max (30)\n  const keywordMatchRatio = jdKeys.length ? matched.length / jdKeys.length : 1;\n  const keywordScore = Math.round(keywordMatchRatio * WEIGHT_KEYWORD);\n\n  // 3. Formatting (30%) - Weak word check\n  let weakWordCount = 0;\n  WEAK_WORDS.forEach(word => {\n    // Global regex to count all instances of weak verbs, using boundary checks\n    const regex = new RegExp(`\\\\b${word.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'g'); // Escaping for regex\n    weakWordCount += (resumeLower.match(regex) || []).length; // Simpler match count\n  });\n\n  // Calculate penalty: 3 points per 5 occurrences (adjusted for a smoother penalty curve)\n  const weakWordPenalty = Math.min(Math.floor(weakWordCount / 5) * 5, MAX_WEAK_WORD_PENALTY);\n  const formattingScore = Math.max(0, WEIGHT_FORMATTING - weakWordPenalty);\n\n  // Final Score calculation\n  const atsScore = Math.max(0, Math.min(100, structureScore + keywordScore + formattingScore));\n  const missingKeys = jdKeys.filter(k => !resumeLower.includes(k));\n  return {\n    found,\n    missing,\n    matched,\n    missingKeys,\n    atsScore,\n    uniqueJD: jdKeys.length,\n    weakWordCount\n  };\n}\n\n// --- Component and Hook ---\n\nexport default function ResumeAnalyzer() {\n  _s();\n  const [resumeText, setResumeText] = useState(\"\");\n  const [jobDescription, setJobDescription] = useState(\"\");\n  const [selectedTemplate, setSelectedTemplate] = useState(RESUME_TEMPLATES.modern.id);\n  const [analysis, setAnalysis] = useState(null);\n  const [fileError, setFileError] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isChatbotOpen, setIsChatbotOpen] = useState(false); // New state for chatbot\n\n  const previewRef = useRef(null);\n  const fileInputRef = useRef(null);\n\n  /** Handles file upload and processes content. */\n  const handleFile = file => {\n    setFileError(null);\n    if (!file) return;\n    if (file.size > 2 * 1024 * 1024) {\n      setFileError(\"File too large (Max 2MB).\");\n      setResumeText(\"\");\n      return;\n    }\n\n    // PDF Handling Simulation: PDF parsing is complex, so we load dummy text for PDF files\n    if (file.type === \"application/pdf\") {\n      setFileError(\"⚠️ PDF selected. Use .txt for accurate analysis. Dummy content loaded for demonstration.\");\n      setResumeText(\"John Smith\\n(555) 123-4567 | john.smith@email.com | LinkedIn/johnsmith\\n\\nSummary\\nHighly motivated developer with experience in full-stack web technologies.\\n\\nExperience\\n- Spearheaded the development of a customer-facing portal using React and Tailwind CSS.\\n- Drove the migration of legacy systems to a new Firestore database, improving performance by 30%.\\n- Led Agile sprint planning and deployment cycles.\\n\\nSkills\\nReact, JavaScript, Tailwind CSS, Firebase, Firestore, Agile Methodology, SQL, Deployment.\\n\\nEducation\\nB.S. Computer Science, University of Technology\");\n      return;\n    }\n    if (file.type !== \"text/plain\") {\n      setFileError(\"Upload a .txt or .pdf file only. TXT recommended.\");\n      setResumeText(\"\");\n      return;\n    }\n\n    // Handle TXT file content\n    const reader = new FileReader();\n    reader.onload = e => setResumeText(String(e.target.result || \"\"));\n    reader.readAsText(file);\n  };\n\n  // Effect to recalculate ATS score whenever input changes\n  useEffect(() => {\n    // Debounce or only run if necessary might be a good optimization for large texts, but simplified for this example\n    if (!resumeText) {\n      setAnalysis(null);\n      return;\n    }\n    const startTime = performance.now();\n    setAnalysis(calculateATSScore(resumeText, jobDescription));\n    const endTime = performance.now();\n    console.log(`Resume analysis completed in ${(endTime - startTime).toFixed(2)} ms.`);\n  }, [resumeText, jobDescription]);\n\n  // Memoized function to generate actionable feedback for the user\n  const feedback = useMemo(() => {\n    if (!analysis) return [];\n    const list = [];\n    const {\n      atsScore,\n      missing,\n      uniqueJD,\n      matched,\n      weakWordCount,\n      missingKeys\n    } = analysis;\n\n    // 1. Structure Feedback (with correct icons from CSS)\n    if (missing.length > 0) {\n      list.push(`Structure Deficiency: Missing core sections: <strong>${missing.map(s => s.toUpperCase()).join(\", \")}</strong>. (Impact: High)`); // ❌\n    } else {\n      list.push(`⭐ Structure Complete: All standard core sections found.`); // ⭐\n    }\n\n    // 2. Keyword Feedback (Real-time JD Check)\n    const matchPct = uniqueJD ? Math.round(matched.length / uniqueJD * 100) : 100;\n    if (uniqueJD === 0) {\n      list.push(`No JD provided. Paste one to calculate keyword alignment and boost your score!`); // 🔎\n    } else if (matchPct < 40) {\n      list.push(`🔴 Low Keyword Match (${matchPct}%): Major tailoring needed. Missing critical terms like: <strong>${missingKeys.slice(0, 3).join(', ')}...</strong>`); // 🔴\n    } else if (matchPct < 70) {\n      list.push(`🟡 Moderate Match (${matchPct}%): Add missing terms for a stronger ATS score. You're close!`); // 🟡\n    } else {\n      list.push(`⭐ Strong Match (${matchPct}%): Excellent keyword alignment.`); // ⭐\n    }\n\n    // 3. Formatting/Vocabulary Feedback\n    if (weakWordCount > 0) {\n      // Suggest alternate words from the JD that were matched as a relevant, actionable suggestion\n      const actionVerbs = matched.filter(k => k.length > 4 && isNaN(parseInt(k))).slice(0, 3);\n      const suggestions = actionVerbs.length > 0 ? actionVerbs.join(', ') : 'Spearheaded, Drove, Led';\n      list.push(`⚠️ Vocabulary: Used weak verbs <strong>${weakWordCount}</strong> times. Replace passive terms like 'responsible for' with stronger **action verbs** like: <strong>${suggestions}</strong>.`); // ⚠️\n    } else {\n      list.push(`⭐ Vocabulary: Strong action verbs detected.`); // ⭐\n    }\n\n    // 4. Final Score\n    list.push(`📊 Final ATS Score: <strong>${atsScore}%</strong>. Target 80%+ for top performance.`); // 📊\n\n    return list;\n  }, [analysis]);\n\n  // Template Recommendation based on score\n  const templateRecommendation = useMemo(() => {\n    if (!analysis) return null;\n    const {\n      atsScore\n    } = analysis;\n    if (atsScore >= 80) return RESUME_TEMPLATES.modern.id; // High score: Use Modern to highlight professionalism\n    if (atsScore >= 50) return RESUME_TEMPLATES.minimal.id; // Moderate: Minimal is safe and clean\n    return RESUME_TEMPLATES.creative.id; // Low score: Creative can help visually distract/engage, or Minimal is also a safe bet.\n  }, [analysis]);\n  const candidateName = useMemo(() => firstNonEmptyLine(resumeText), [resumeText]);\n  const htmlBody = useMemo(() => plainToHTML(resumeText), [resumeText]);\n\n  // Get the current template object\n  const currentTemplate = RESUME_TEMPLATES[selectedTemplate] || RESUME_TEMPLATES.modern;\n\n  /** Dynamically loads external libraries (jsPDF and html2canvas) for export. */\n  const loadLibraries = useCallback(() => {\n    return new Promise((resolve, reject) => {\n      if (window.jsPDF && window.html2canvas) return resolve();\n      const jsPDFScript = document.createElement(\"script\");\n      jsPDFScript.src = \"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js\";\n      jsPDFScript.onerror = () => reject(new Error(\"Failed to load jsPDF.\"));\n      jsPDFScript.onload = () => {\n        const html2canvasScript = document.createElement(\"script\");\n        html2canvasScript.src = \"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\";\n        html2canvasScript.onerror = () => reject(new Error(\"Failed to load html2canvas.\"));\n        html2canvasScript.onload = resolve;\n        document.body.appendChild(html2canvasScript);\n      };\n      document.body.appendChild(jsPDFScript);\n    });\n  }, []);\n\n  /** Generates PDF locally for download. */\n  const handleDownload = async () => {\n    if (!previewRef.current) return;\n    setIsProcessing(true);\n    let originalClass = ''; // Declare outside try/catch to ensure finally block can access it\n    const node = previewRef.current;\n    try {\n      await loadLibraries();\n\n      // Temporarily apply full template styles for high-quality, print-ready export\n      originalClass = node.className;\n      // Use the actual template class and add the print/export base class\n      node.className = `resume-sheet ${currentTemplate.className} export-ready`;\n\n      // 1. Generate image from HTML/CSS\n      const canvas = await window.html2canvas(node, {\n        scale: 3,\n        backgroundColor: \"#fff\",\n        useCORS: true\n      });\n      const imgData = canvas.toDataURL(\"image/jpeg\", 0.95); // Use JPEG for smaller file size and 0.95 quality\n\n      // 2. Generate PDF using jsPDF\n      const {\n        jsPDF\n      } = window;\n      const pdf = new jsPDF(\"p\", \"pt\", \"a4\");\n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const imgHeight = canvas.height * pageWidth / canvas.width;\n\n      // Simple multi-page handling\n      let y = 0,\n        remainingHeight = imgHeight;\n      while (remainingHeight > 0) {\n        // Only add a new page if it's not the first one\n        if (y > 0) pdf.addPage();\n\n        // The Y position for the image on the PDF is always negative, shifting the canvas content up\n        pdf.addImage(imgData, \"JPEG\", 0, -y, pageWidth, imgHeight);\n        remainingHeight -= pageHeight;\n        y += pageHeight;\n      }\n      const fileName = `${candidateName.replace(/\\s/g, \"_\")}_${selectedTemplate}_Resume.pdf`;\n\n      // 3. Local Download\n      pdf.save(fileName);\n    } catch (err) {\n      console.error(`⚠️ PDF Generation Error:`, err);\n      alert(`PDF Generation failed. Please check the console for details. (Error: ${err.message})`);\n    } finally {\n      setIsProcessing(false);\n      // Revert styles after canvas generation\n      if (originalClass) node.className = originalClass;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"\\uD83D\\uDCC4 Resume Input (Max 2MB)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"resume-dropzone\",\n            onDrop: e => {\n              e.preventDefault();\n              e.stopPropagation();\n              if (e.dataTransfer.files.length > 0) handleFile(e.dataTransfer.files[0]);\n            },\n            onDragOver: e => {\n              e.preventDefault();\n              e.stopPropagation();\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"dropzone-text\",\n              children: \"Drag & Drop or Select a File (.txt, .pdf)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              ref: fileInputRef,\n              type: \"file\",\n              accept: \".txt,application/pdf\",\n              style: {\n                display: \"none\"\n              },\n              onChange: e => {\n                var _e$target$files;\n                return handleFile((_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0]);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn select-file-btn\",\n              onClick: () => fileInputRef.current.click(),\n              children: \"Select File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 15\n            }, this), fileError && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hint file-error\",\n              children: fileError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"text-input jd-input mt-1\",\n            placeholder: \"Paste your resume content here. (TXT is best for parsing accuracy)\",\n            value: resumeText,\n            onChange: e => setResumeText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"\\uD83D\\uDCDD Job Description (For Keyword Scoring)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"text-input jd-input\",\n            placeholder: \"Paste Job Description here...\",\n            value: jobDescription,\n            onChange: e => setJobDescription(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"hint\",\n            children: \"Pasting the JD is crucial. The tool analyzes keywords against this text for 30% of your ATS score.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), resumeText && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"\\uD83C\\uDFA8 Choose Template\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"template-grid\",\n            children: Object.values(RESUME_TEMPLATES).map(t => /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: `template-card ${selectedTemplate === t.id ? \"selected\" : \"\"}`,\n              onClick: () => setSelectedTemplate(t.id),\n              title: t.name,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: `template-swatch ${t.className}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"template-name\",\n                children: t.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 21\n              }, this)]\n            }, t.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this), analysis && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: [\"\\uD83D\\uDCCA ATS Analysis (Score: \", analysis.atsScore, \"%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"score-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"score-ring\",\n              style: {\n                \"--pct\": `${analysis.atsScore}%`,\n                \"--ring-color\": analysis.atsScore >= 70 ? 'var(--ok)' : analysis.atsScore >= 40 ? 'var(--warn)' : 'var(--bad)'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"score-num\",\n                children: analysis.atsScore\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"score-label\",\n                children: \"Score\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"analysis-points\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Actionable Suggestions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"feedback-list\",\n                children: feedback.map((f, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  dangerouslySetInnerHTML: {\n                    __html: f\n                  }\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 47\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 21\n              }, this), templateRecommendation && selectedTemplate !== templateRecommendation && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"hint mt-05 template-recommendation\",\n                children: [\"**Template Tip:** Based on your score, the **\", RESUME_TEMPLATES[templateRecommendation].name, \"** template is recommended for optimal presentation.\", /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"link-button\",\n                  onClick: () => setSelectedTemplate(templateRecommendation),\n                  children: \"Apply\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 415,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn primary\",\n              onClick: handleDownload,\n              disabled: isProcessing,\n              children: isProcessing ? 'Processing PDF...' : `⬇️ Download '${currentTemplate.name}' as PDF`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hint mt-05\",\n              children: \"Generates a PDF of your formatted resume using the selected template.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: previewRef,\n          className: `resume-sheet ${currentTemplate.className}`,\n          style: {\n            fontFamily: currentTemplate.fontStack\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"responsive-preview-label\",\n            children: \"Current View: Desktop (A4 Ratio)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sheet-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: candidateName.slice(0, 1).toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"headings\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"name\",\n                children: candidateName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tagline\",\n                children: [currentTemplate.name, \" Template\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sheet-body\",\n            dangerouslySetInnerHTML: {\n              __html: htmlBody\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: `fab ${isChatbotOpen ? 'fab-active' : ''}`,\n      onClick: () => setIsChatbotOpen(!isChatbotOpen),\n      title: isChatbotOpen ? \"Close Chatbot\" : \"Open Chatbot\",\n      children: isChatbotOpen ? '✕' : '💬'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chatbot-container ${isChatbotOpen ? 'open' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Resume AI Assistant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"x\",\n            onClick: () => setIsChatbotOpen(false),\n            title: \"Close Chat\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-message bot\",\n            children: \"Hello! I can help you with your resume analysis. Ask me about your score or missing keywords!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your message...\",\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: true,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 5\n  }, this);\n}\n\n// Export the templates map to be used in App.css for consistent variable use\n// export { RESUME_TEMPLATES }; \n// (Note: To avoid a circular dependency if App.css imports this, the TEMPLATES definition was moved into the component's scope, but I'll keep the template name constant inside the file for cleaner usage above.)\n_s(ResumeAnalyzer, \"xhIvExzwzWyZ7GMHyQc49+K1dr8=\");\n_c = ResumeAnalyzer;\nvar _c;\n$RefreshReg$(_c, \"ResumeAnalyzer\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","RESUME_SECTIONS","contact","summary","experience","skills","education","projects","certifications","awards","CORE_SECTIONS","RESUME_TEMPLATES","modern","id","name","className","fontStack","minimal","creative","STOPWORDS","Set","WEAK_WORDS","extractKeywords","text","toLowerCase","split","map","w","trim","filter","length","has","firstNonEmptyLine","s","x","find","escapeHTML","replaceAll","plainToHTML","resumeText","lines","line","htmlOutput","inList","forEach","trimmed","isHeading","Object","values","some","r","test","isBullet","match","safeContent","replace","calculateATSScore","jobDescription","found","missing","resumeLower","WEIGHT_STRUCTURE","WEIGHT_KEYWORD","WEIGHT_FORMATTING","MAX_WEAK_WORD_PENALTY","entries","k","rgx","isFound","includes","push","coreFoundCount","structureScore","Math","round","jdKeys","matched","keywordMatchRatio","keywordScore","weakWordCount","word","regex","RegExp","weakWordPenalty","min","floor","formattingScore","max","atsScore","missingKeys","uniqueJD","ResumeAnalyzer","_s","setResumeText","setJobDescription","selectedTemplate","setSelectedTemplate","analysis","setAnalysis","fileError","setFileError","isProcessing","setIsProcessing","isChatbotOpen","setIsChatbotOpen","previewRef","fileInputRef","handleFile","file","size","type","reader","FileReader","onload","e","String","target","result","readAsText","startTime","performance","now","endTime","console","log","toFixed","feedback","list","toUpperCase","join","matchPct","slice","actionVerbs","isNaN","parseInt","suggestions","templateRecommendation","candidateName","htmlBody","currentTemplate","loadLibraries","Promise","resolve","reject","window","jsPDF","html2canvas","jsPDFScript","document","createElement","src","onerror","Error","html2canvasScript","body","appendChild","handleDownload","current","originalClass","node","canvas","scale","backgroundColor","useCORS","imgData","toDataURL","pdf","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","imgHeight","height","width","y","remainingHeight","addPage","addImage","fileName","save","err","error","alert","message","children","_jsxFileName","lineNumber","columnNumber","onDrop","preventDefault","stopPropagation","dataTransfer","files","onDragOver","ref","accept","style","display","onChange","_e$target$files","onClick","click","placeholder","value","t","title","f","i","dangerouslySetInnerHTML","__html","disabled","fontFamily","_c","$RefreshReg$"],"sources":["C:/Users/smscp/Desktop/Ram/PESU 5th sem Project/SE project/src/ResumeAnalyzer.js"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState, useCallback } from \"react\";\r\n\r\n// --- Configuration Constants (Centralized and Descriptive) ---\r\n\r\n// Section definitions for robust parsing using regex. Added 'Awards' and made regexes slightly more robust.\r\nconst RESUME_SECTIONS = {\r\n  contact: /\\b(contact|email|phone|linkedin|github|address)\\b/i,\r\n  summary: /\\b(summary|objective|profile|professional summary)\\b/i,\r\n  experience: /\\b(experience|work experience|employment|career|professional history)\\b/i,\r\n  skills: /\\b(skills|technical skills|competencies|technologies|tools)\\b/i,\r\n  education: /\\b(education|degree|university|college|academic history)\\b/i,\r\n  projects: /\\b(projects?|portfolio|personal projects?)\\b/i,\r\n  certifications: /\\b(certifications?|certificates?|license|licensed?)\\b/i,\r\n  awards: /\\b(awards|honors|achievements)\\b/i,\r\n};\r\n\r\n// Core sections for scoring (must-haves)\r\nconst CORE_SECTIONS = [\"contact\", \"summary\", \"experience\", \"skills\", \"education\"];\r\n\r\n// Template definitions for styling\r\nexport const RESUME_TEMPLATES = {\r\n  modern: { id: 'modern', name: \"Modern Professional\", className: \"theme-modern\", fontStack: \"ui-sans-serif, system-ui, Segoe UI, Arial\" },\r\n  minimal: { id: 'minimal', name: \"Minimal Clean\", className: \"theme-minimal\", fontStack: \"Arial, Helvetica, sans-serif\" },\r\n  creative: { id: 'creative', name: \"Creative Bold\", className: \"theme-creative\", fontStack: \"Helvetica, Arial, sans-serif\" },\r\n};\r\n\r\n// Stopwords used for cleaner keyword extraction from the JD (extended for better precision)\r\nconst STOPWORDS = new Set([\r\n  \"and\", \"the\", \"with\", \"from\", \"that\", \"this\", \"your\", \"their\", \"our\", \"for\", \"into\", \"able\", \"will\", \"shall\", \"must\", \"have\", \"has\", \"had\",\r\n  \"are\", \"was\", \"were\", \"you\", \"they\", \"them\", \"over\", \"under\", \"about\", \"above\", \"below\", \"not\", \"only\", \"but\", \"also\", \"more\", \"than\",\r\n  \"such\", \"etc\", \"using\", \"use\", \"used\", \"strong\", \"good\", \"great\", \"work\", \"role\", \"team\", \"skills\", \"requirements\", \"responsibilities\",\r\n  \"job\", \"description\", \"looking\", \"plus\", \"preferred\", \"required\", \"experience\", \"years\", \"year\", \"developer\", \"engineer\", \"data\", \"to\",\r\n  \"a\", \"an\", \"is\", \"of\", \"in\", \"it\", \"at\", \"by\", \"be\", \"as\", \"or\"\r\n]);\r\n\r\n// Weak words that penalize the formatting/vocabulary score (action verb detection)\r\nconst WEAK_WORDS = [\"responsible for\", \"managed\", \"worked on\", \"assisted\", \"duties included\", \"had to\", \"developed a\", \"was involved in\", \"my main task was\"];\r\n\r\n// --- Utility Functions ---\r\n\r\n/** Extracts unique, relevant keywords from text, ignoring common stopwords. */\r\nfunction extractKeywords(text) {\r\n  return [...new Set(text.toLowerCase().split(/[^a-z0-9+#.]/i)\r\n    .map(w => w.trim())\r\n    .filter(w => w.length > 2 && !STOPWORDS.has(w))\r\n  )];\r\n}\r\n\r\n/** Finds the first non-empty line to use as the candidate name. */\r\nfunction firstNonEmptyLine(s) {\r\n  return (s || \"\").split(/\\r?\\n/).map(x => x.trim()).find(x => x.length > 0) || \"Candidate Name\";\r\n}\r\n\r\n/** Escapes special HTML characters to prevent XSS in dangerouslySetInnerHTML. */\r\nfunction escapeHTML(s) {\r\n  return s.replaceAll(\"&\", \"&amp;\").replaceAll(\"<\", \"&lt;\").replaceAll(\">\", \"&gt;\").replaceAll('\"', '&quot;').replaceAll(\"'\", '&#39;');\r\n}\r\n\r\n/** Converts plain text resume content into structured HTML for template rendering. */\r\nfunction plainToHTML(resumeText) {\r\n  const lines = (resumeText || \"\").split(/\\r?\\n/).map(line => line.trim()).filter(line => line.length > 0);\r\n  let htmlOutput = \"\";\r\n  let inList = false;\r\n\r\n  lines.forEach(trimmed => {\r\n    // Check if the line looks like a standard resume section heading\r\n    const isHeading = Object.values(RESUME_SECTIONS).some(r => r.test(trimmed));\r\n\r\n    // Check if the line looks like a bullet point (starts with '-', '*', '•', or digit followed by space)\r\n    const isBullet = trimmed.match(/^[-*•\\d]\\s/);\r\n    // Remove bullet/numbering symbol before escaping content\r\n    const safeContent = escapeHTML(trimmed.replace(/^[-*•\\d.]+\\s*/, ''));\r\n\r\n    if (isHeading) {\r\n      // Close list if we hit a heading and were in a list\r\n      if (inList) htmlOutput += \"</ul>\\n\";\r\n      inList = false;\r\n      // Use RESUME_SECTIONS keys to correctly identify and format the heading if needed, but for now just use the content\r\n      htmlOutput += `<h2 class=\"section-heading\">${safeContent}</h2>\\n`;\r\n    } else if (isBullet) {\r\n      // Start list if not already in one\r\n      if (!inList) htmlOutput += \"<ul>\\n\";\r\n      inList = true;\r\n      htmlOutput += `<li>${safeContent}</li>\\n`;\r\n    } else {\r\n      // Close list if we hit a normal paragraph and were in a list\r\n      if (inList) htmlOutput += \"</ul>\\n\";\r\n      inList = false;\r\n      htmlOutput += `<p>${safeContent}</p>\\n`;\r\n    }\r\n  });\r\n\r\n  // Ensure the last list is closed if the resume ends with a list\r\n  if (inList) htmlOutput += \"</ul>\\n\";\r\n\r\n  return htmlOutput;\r\n}\r\n\r\n/** Calculates the ATS score based on completeness, keyword match, and formatting. */\r\nfunction calculateATSScore(resumeText, jobDescription) {\r\n  const found = {};\r\n  const missing = [];\r\n  const resumeLower = resumeText.toLowerCase();\r\n\r\n  // Score Weights: Completeness (40%), Keywords (30%), Formatting (30%)\r\n  const WEIGHT_STRUCTURE = 40;\r\n  const WEIGHT_KEYWORD = 30;\r\n  const WEIGHT_FORMATTING = 30;\r\n  const MAX_WEAK_WORD_PENALTY = 15; // Max 5 * 3 = 15 points\r\n\r\n  // 1. Completeness (40%)\r\n  Object.entries(RESUME_SECTIONS).forEach(([k, rgx]) => {\r\n    const isFound = rgx.test(resumeLower);\r\n    if (isFound) found[k] = true;\r\n    else if (CORE_SECTIONS.includes(k)) missing.push(k); // Only check for core sections\r\n  });\r\n\r\n  const coreFoundCount = CORE_SECTIONS.length - missing.length;\r\n  // Score based on the ratio of found core sections\r\n  const structureScore = Math.round((coreFoundCount / CORE_SECTIONS.length) * WEIGHT_STRUCTURE);\r\n\r\n  // 2. Keywords (30%) - JD matching\r\n  const jdKeys = extractKeywords(jobDescription);\r\n  const matched = jdKeys.filter(k => resumeLower.includes(k));\r\n  // Prevents division by zero if JD is empty, setting score to max (30)\r\n  const keywordMatchRatio = jdKeys.length ? matched.length / jdKeys.length : 1;\r\n  const keywordScore = Math.round(keywordMatchRatio * WEIGHT_KEYWORD);\r\n\r\n  // 3. Formatting (30%) - Weak word check\r\n  let weakWordCount = 0;\r\n  WEAK_WORDS.forEach(word => {\r\n    // Global regex to count all instances of weak verbs, using boundary checks\r\n    const regex = new RegExp(`\\\\b${word.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'g'); // Escaping for regex\r\n    weakWordCount += (resumeLower.match(regex) || []).length; // Simpler match count\r\n  });\r\n\r\n  // Calculate penalty: 3 points per 5 occurrences (adjusted for a smoother penalty curve)\r\n  const weakWordPenalty = Math.min(Math.floor(weakWordCount / 5) * 5, MAX_WEAK_WORD_PENALTY);\r\n  const formattingScore = Math.max(0, WEIGHT_FORMATTING - weakWordPenalty);\r\n\r\n  // Final Score calculation\r\n  const atsScore = Math.max(0, Math.min(100, structureScore + keywordScore + formattingScore));\r\n  const missingKeys = jdKeys.filter(k => !resumeLower.includes(k));\r\n\r\n  return {\r\n    found, missing, matched, missingKeys,\r\n    atsScore, uniqueJD: jdKeys.length,\r\n    weakWordCount,\r\n  };\r\n}\r\n\r\n// --- Component and Hook ---\r\n\r\nexport default function ResumeAnalyzer() {\r\n  const [resumeText, setResumeText] = useState(\"\");\r\n  const [jobDescription, setJobDescription] = useState(\"\");\r\n  const [selectedTemplate, setSelectedTemplate] = useState(RESUME_TEMPLATES.modern.id);\r\n  const [analysis, setAnalysis] = useState(null);\r\n  const [fileError, setFileError] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [isChatbotOpen, setIsChatbotOpen] = useState(false); // New state for chatbot\r\n\r\n  const previewRef = useRef(null);\r\n  const fileInputRef = useRef(null);\r\n\r\n  /** Handles file upload and processes content. */\r\n  const handleFile = (file) => {\r\n    setFileError(null);\r\n    if (!file) return;\r\n\r\n    if (file.size > 2 * 1024 * 1024) {\r\n      setFileError(\"File too large (Max 2MB).\");\r\n      setResumeText(\"\");\r\n      return;\r\n    }\r\n\r\n    // PDF Handling Simulation: PDF parsing is complex, so we load dummy text for PDF files\r\n    if (file.type === \"application/pdf\") {\r\n      setFileError(\"⚠️ PDF selected. Use .txt for accurate analysis. Dummy content loaded for demonstration.\");\r\n      setResumeText(\"John Smith\\n(555) 123-4567 | john.smith@email.com | LinkedIn/johnsmith\\n\\nSummary\\nHighly motivated developer with experience in full-stack web technologies.\\n\\nExperience\\n- Spearheaded the development of a customer-facing portal using React and Tailwind CSS.\\n- Drove the migration of legacy systems to a new Firestore database, improving performance by 30%.\\n- Led Agile sprint planning and deployment cycles.\\n\\nSkills\\nReact, JavaScript, Tailwind CSS, Firebase, Firestore, Agile Methodology, SQL, Deployment.\\n\\nEducation\\nB.S. Computer Science, University of Technology\");\r\n      return;\r\n    }\r\n\r\n    if (file.type !== \"text/plain\") {\r\n      setFileError(\"Upload a .txt or .pdf file only. TXT recommended.\");\r\n      setResumeText(\"\");\r\n      return;\r\n    }\r\n\r\n    // Handle TXT file content\r\n    const reader = new FileReader();\r\n    reader.onload = e => setResumeText(String(e.target.result || \"\"));\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Effect to recalculate ATS score whenever input changes\r\n  useEffect(() => {\r\n    // Debounce or only run if necessary might be a good optimization for large texts, but simplified for this example\r\n    if (!resumeText) { setAnalysis(null); return; }\r\n    const startTime = performance.now();\r\n    setAnalysis(calculateATSScore(resumeText, jobDescription));\r\n    const endTime = performance.now();\r\n    console.log(`Resume analysis completed in ${(endTime - startTime).toFixed(2)} ms.`);\r\n  }, [resumeText, jobDescription]);\r\n\r\n  // Memoized function to generate actionable feedback for the user\r\n  const feedback = useMemo(() => {\r\n    if (!analysis) return [];\r\n    const list = [];\r\n    const { atsScore, missing, uniqueJD, matched, weakWordCount, missingKeys } = analysis;\r\n\r\n    // 1. Structure Feedback (with correct icons from CSS)\r\n    if (missing.length > 0) {\r\n      list.push(`Structure Deficiency: Missing core sections: <strong>${missing.map(s => s.toUpperCase()).join(\", \")}</strong>. (Impact: High)`); // ❌\r\n    } else {\r\n      list.push(`⭐ Structure Complete: All standard core sections found.`); // ⭐\r\n    }\r\n\r\n    // 2. Keyword Feedback (Real-time JD Check)\r\n    const matchPct = uniqueJD ? Math.round((matched.length / uniqueJD) * 100) : 100;\r\n    if (uniqueJD === 0) {\r\n      list.push(`No JD provided. Paste one to calculate keyword alignment and boost your score!`); // 🔎\r\n    } else if (matchPct < 40) {\r\n      list.push(`🔴 Low Keyword Match (${matchPct}%): Major tailoring needed. Missing critical terms like: <strong>${missingKeys.slice(0, 3).join(', ')}...</strong>`); // 🔴\r\n    } else if (matchPct < 70) {\r\n      list.push(`🟡 Moderate Match (${matchPct}%): Add missing terms for a stronger ATS score. You're close!`); // 🟡\r\n    } else {\r\n      list.push(`⭐ Strong Match (${matchPct}%): Excellent keyword alignment.`); // ⭐\r\n    }\r\n\r\n    // 3. Formatting/Vocabulary Feedback\r\n    if (weakWordCount > 0) {\r\n      // Suggest alternate words from the JD that were matched as a relevant, actionable suggestion\r\n      const actionVerbs = matched.filter(k => k.length > 4 && isNaN(parseInt(k))).slice(0, 3);\r\n      const suggestions = actionVerbs.length > 0 ? actionVerbs.join(', ') : 'Spearheaded, Drove, Led';\r\n\r\n      list.push(`⚠️ Vocabulary: Used weak verbs <strong>${weakWordCount}</strong> times. Replace passive terms like 'responsible for' with stronger **action verbs** like: <strong>${suggestions}</strong>.`); // ⚠️\r\n    } else {\r\n      list.push(`⭐ Vocabulary: Strong action verbs detected.`); // ⭐\r\n    }\r\n\r\n    // 4. Final Score\r\n    list.push(`📊 Final ATS Score: <strong>${atsScore}%</strong>. Target 80%+ for top performance.`); // 📊\r\n\r\n    return list;\r\n  }, [analysis]);\r\n\r\n  // Template Recommendation based on score\r\n  const templateRecommendation = useMemo(() => {\r\n    if (!analysis) return null;\r\n    const { atsScore } = analysis;\r\n\r\n    if (atsScore >= 80) return RESUME_TEMPLATES.modern.id; // High score: Use Modern to highlight professionalism\r\n    if (atsScore >= 50) return RESUME_TEMPLATES.minimal.id; // Moderate: Minimal is safe and clean\r\n    return RESUME_TEMPLATES.creative.id; // Low score: Creative can help visually distract/engage, or Minimal is also a safe bet.\r\n  }, [analysis]);\r\n\r\n  const candidateName = useMemo(() => firstNonEmptyLine(resumeText), [resumeText]);\r\n  const htmlBody = useMemo(() => plainToHTML(resumeText), [resumeText]);\r\n  \r\n  // Get the current template object\r\n  const currentTemplate = RESUME_TEMPLATES[selectedTemplate] || RESUME_TEMPLATES.modern;\r\n\r\n\r\n  /** Dynamically loads external libraries (jsPDF and html2canvas) for export. */\r\n  const loadLibraries = useCallback(() => {\r\n    return new Promise((resolve, reject) => {\r\n      if (window.jsPDF && window.html2canvas) return resolve();\r\n\r\n      const jsPDFScript = document.createElement(\"script\");\r\n      jsPDFScript.src = \"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js\";\r\n      jsPDFScript.onerror = () => reject(new Error(\"Failed to load jsPDF.\"));\r\n      jsPDFScript.onload = () => {\r\n        const html2canvasScript = document.createElement(\"script\");\r\n        html2canvasScript.src = \"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\";\r\n        html2canvasScript.onerror = () => reject(new Error(\"Failed to load html2canvas.\"));\r\n        html2canvasScript.onload = resolve;\r\n        document.body.appendChild(html2canvasScript);\r\n      };\r\n      document.body.appendChild(jsPDFScript);\r\n    });\r\n  }, []);\r\n\r\n  /** Generates PDF locally for download. */\r\n  const handleDownload = async () => {\r\n    if (!previewRef.current) return;\r\n\r\n    setIsProcessing(true);\r\n    let originalClass = ''; // Declare outside try/catch to ensure finally block can access it\r\n    const node = previewRef.current;\r\n    \r\n    try {\r\n      await loadLibraries();\r\n      \r\n      // Temporarily apply full template styles for high-quality, print-ready export\r\n      originalClass = node.className;\r\n      // Use the actual template class and add the print/export base class\r\n      node.className = `resume-sheet ${currentTemplate.className} export-ready`; \r\n\r\n      // 1. Generate image from HTML/CSS\r\n      const canvas = await window.html2canvas(node, {\r\n        scale: 3,\r\n        backgroundColor: \"#fff\",\r\n        useCORS: true\r\n      });\r\n      const imgData = canvas.toDataURL(\"image/jpeg\", 0.95); // Use JPEG for smaller file size and 0.95 quality\r\n\r\n      // 2. Generate PDF using jsPDF\r\n      const { jsPDF } = window;\r\n      const pdf = new jsPDF(\"p\", \"pt\", \"a4\");\r\n      const pageWidth = pdf.internal.pageSize.getWidth();\r\n      const pageHeight = pdf.internal.pageSize.getHeight();\r\n      const imgHeight = (canvas.height * pageWidth) / canvas.width;\r\n\r\n      // Simple multi-page handling\r\n      let y = 0, remainingHeight = imgHeight;\r\n      while (remainingHeight > 0) {\r\n        // Only add a new page if it's not the first one\r\n        if (y > 0) pdf.addPage();\r\n        \r\n        // The Y position for the image on the PDF is always negative, shifting the canvas content up\r\n        pdf.addImage(imgData, \"JPEG\", 0, -y, pageWidth, imgHeight); \r\n        \r\n        remainingHeight -= pageHeight;\r\n        y += pageHeight;\r\n      }\r\n\r\n      const fileName = `${candidateName.replace(/\\s/g, \"_\")}_${selectedTemplate}_Resume.pdf`;\r\n\r\n      // 3. Local Download\r\n      pdf.save(fileName);\r\n\r\n    } catch (err) {\r\n      console.error(`⚠️ PDF Generation Error:`, err);\r\n      alert(`PDF Generation failed. Please check the console for details. (Error: ${err.message})`);\r\n    } finally {\r\n      setIsProcessing(false);\r\n      // Revert styles after canvas generation\r\n      if (originalClass) node.className = originalClass;\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section className=\"container\">\r\n        <div className=\"grid-2\">\r\n          {/* Resume Input Card (File/Text) */}\r\n          <div className=\"card\">\r\n            <h2 className=\"section-title\">📄 Resume Input (Max 2MB)</h2>\r\n            <div className=\"resume-dropzone\"\r\n              onDrop={e => { e.preventDefault(); e.stopPropagation(); if (e.dataTransfer.files.length > 0) handleFile(e.dataTransfer.files[0]); }}\r\n              onDragOver={e => { e.preventDefault(); e.stopPropagation(); }}\r\n            >\r\n              <p className=\"dropzone-text\">Drag & Drop or Select a File (.txt, .pdf)</p>\r\n              <input\r\n                ref={fileInputRef}\r\n                type=\"file\"\r\n                accept=\".txt,application/pdf\"\r\n                style={{ display: \"none\" }}\r\n                onChange={e => handleFile(e.target.files?.[0])}\r\n              />\r\n              <button type=\"button\" className=\"btn select-file-btn\" onClick={() => fileInputRef.current.click()}>Select File</button>\r\n              {fileError && <p className=\"hint file-error\">{fileError}</p>}\r\n            </div>\r\n            <textarea className=\"text-input jd-input mt-1\"\r\n              placeholder=\"Paste your resume content here. (TXT is best for parsing accuracy)\"\r\n              value={resumeText}\r\n              onChange={e => setResumeText(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          {/* Job Description Card */}\r\n          <div className=\"card\">\r\n            <h2 className=\"section-title\">📝 Job Description (For Keyword Scoring)</h2>\r\n            <textarea className=\"text-input jd-input\" placeholder=\"Paste Job Description here...\" value={jobDescription} onChange={e => setJobDescription(e.target.value)} />\r\n            <p className=\"hint\">Pasting the JD is crucial. The tool analyzes keywords against this text for 30% of your ATS score.</p>\r\n          </div>\r\n        </div>\r\n\r\n        {resumeText && (\r\n          <>\r\n            {/* Template Selection Card */}\r\n            <div className=\"card\">\r\n              <h2 className=\"section-title\">🎨 Choose Template</h2>\r\n              <div className=\"template-grid\">\r\n                {Object.values(RESUME_TEMPLATES).map((t) => (\r\n                  <button key={t.id} type=\"button\" className={`template-card ${selectedTemplate === t.id ? \"selected\" : \"\"}`} onClick={() => setSelectedTemplate(t.id)} title={t.name}>\r\n                    <div className={`template-swatch ${t.className}`}></div>\r\n                    <div className=\"template-name\">{t.name}</div>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* ATS Analysis Card (Score + Feedback) */}\r\n            {analysis && (\r\n              <div className=\"card\">\r\n                <h2 className=\"section-title\">📊 ATS Analysis (Score: {analysis.atsScore}%)</h2>\r\n                <div className=\"score-row\">\r\n                  {/* Dynamic Score Ring with color coding */}\r\n                  <div className=\"score-ring\" style={{ \"--pct\": `${analysis.atsScore}%`, \"--ring-color\": analysis.atsScore >= 70 ? 'var(--ok)' : analysis.atsScore >= 40 ? 'var(--warn)' : 'var(--bad)' }}>\r\n                    <div className=\"score-num\">{analysis.atsScore}</div>\r\n                    <div className=\"score-label\">Score</div>\r\n                  </div>\r\n                  <div className=\"analysis-points\">\r\n                    <h3>Actionable Suggestions</h3>\r\n                    <ul className=\"feedback-list\">\r\n                      {feedback.map((f, i) => <li key={i} dangerouslySetInnerHTML={{ __html: f }} />)}\r\n                    </ul>\r\n                    {/* Template Recommendation */}\r\n                    {templateRecommendation && selectedTemplate !== templateRecommendation && (\r\n                      <p className=\"hint mt-05 template-recommendation\">\r\n                        **Template Tip:** Based on your score, the **{RESUME_TEMPLATES[templateRecommendation].name}** template is recommended for optimal presentation.\r\n                        <button type=\"button\" className=\"link-button\" onClick={() => setSelectedTemplate(templateRecommendation)}>Apply</button>\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div className=\"actions\">\r\n                  <button className=\"btn primary\" onClick={handleDownload} disabled={isProcessing}>\r\n                    {isProcessing ? 'Processing PDF...' : `⬇️ Download '${currentTemplate.name}' as PDF`}\r\n                  </button>\r\n                  <p className=\"hint mt-05\">Generates a PDF of your formatted resume using the selected template.</p>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Resume Preview Sheet */}\r\n            <div ref={previewRef} className={`resume-sheet ${currentTemplate.className}`} style={{ fontFamily: currentTemplate.fontStack }}>\r\n              {/* Added a responsive class for mobile view, which you'll need to style in CSS */}\r\n              <div className=\"responsive-preview-label\">Current View: Desktop (A4 Ratio)</div> \r\n              <div className=\"sheet-header\">\r\n                <div className=\"avatar\">{candidateName.slice(0, 1).toUpperCase()}</div>\r\n                <div className=\"headings\">\r\n                  <h1 className=\"name\">{candidateName}</h1>\r\n                  <div className=\"tagline\">{currentTemplate.name} Template</div>\r\n                </div>\r\n              </div>\r\n              <div className=\"sheet-body\" dangerouslySetInnerHTML={{ __html: htmlBody }} />\r\n            </div>\r\n          </>\r\n        )}\r\n      </section>\r\n      \r\n      {/* Floating Action Button (FAB) for Chatbot */}\r\n      <button \r\n        type=\"button\" \r\n        className={`fab ${isChatbotOpen ? 'fab-active' : ''}`}\r\n        onClick={() => setIsChatbotOpen(!isChatbotOpen)}\r\n        title={isChatbotOpen ? \"Close Chatbot\" : \"Open Chatbot\"}\r\n      >\r\n        {isChatbotOpen ? '✕' : '💬'}\r\n      </button>\r\n\r\n      {/* Chatbot Side Panel */}\r\n      <div className={`chatbot-container ${isChatbotOpen ? 'open' : ''}`}>\r\n        <div className=\"chatbot\">\r\n          <div className=\"chat-header\">\r\n            <h3>Resume AI Assistant</h3>\r\n            <button className=\"x\" onClick={() => setIsChatbotOpen(false)} title=\"Close Chat\">✕</button>\r\n          </div>\r\n          <div className=\"chat-messages\">\r\n            <div className=\"chat-message bot\">Hello! I can help you with your resume analysis. Ask me about your score or missing keywords!</div>\r\n            {/* Future chat messages will be inserted here */}\r\n          </div>\r\n          <div className=\"chat-input-row\">\r\n            <input type=\"text\" placeholder=\"Type your message...\" disabled />\r\n            <button disabled>Send</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n// Export the templates map to be used in App.css for consistent variable use\r\n// export { RESUME_TEMPLATES }; \r\n// (Note: To avoid a circular dependency if App.css imports this, the TEMPLATES definition was moved into the component's scope, but I'll keep the template name constant inside the file for cleaner usage above.)"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;;AAEhF;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,eAAe,GAAG;EACtBC,OAAO,EAAE,oDAAoD;EAC7DC,OAAO,EAAE,uDAAuD;EAChEC,UAAU,EAAE,0EAA0E;EACtFC,MAAM,EAAE,gEAAgE;EACxEC,SAAS,EAAE,6DAA6D;EACxEC,QAAQ,EAAE,+CAA+C;EACzDC,cAAc,EAAE,wDAAwD;EACxEC,MAAM,EAAE;AACV,CAAC;;AAED;AACA,MAAMC,aAAa,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,WAAW,CAAC;;AAEjF;AACA,OAAO,MAAMC,gBAAgB,GAAG;EAC9BC,MAAM,EAAE;IAAEC,EAAE,EAAE,QAAQ;IAAEC,IAAI,EAAE,qBAAqB;IAAEC,SAAS,EAAE,cAAc;IAAEC,SAAS,EAAE;EAA4C,CAAC;EACxIC,OAAO,EAAE;IAAEJ,EAAE,EAAE,SAAS;IAAEC,IAAI,EAAE,eAAe;IAAEC,SAAS,EAAE,eAAe;IAAEC,SAAS,EAAE;EAA+B,CAAC;EACxHE,QAAQ,EAAE;IAAEL,EAAE,EAAE,UAAU;IAAEC,IAAI,EAAE,eAAe;IAAEC,SAAS,EAAE,gBAAgB;IAAEC,SAAS,EAAE;EAA+B;AAC5H,CAAC;;AAED;AACA,MAAMG,SAAS,GAAG,IAAIC,GAAG,CAAC,CACxB,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAC1I,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EACrI,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,kBAAkB,EACtI,KAAK,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EACtI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAChE,CAAC;;AAEF;AACA,MAAMC,UAAU,GAAG,CAAC,iBAAiB,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,iBAAiB,EAAE,QAAQ,EAAE,aAAa,EAAE,iBAAiB,EAAE,kBAAkB,CAAC;;AAE7J;;AAEA;AACA,SAASC,eAAeA,CAACC,IAAI,EAAE;EAC7B,OAAO,CAAC,GAAG,IAAIH,GAAG,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,eAAe,CAAC,CACzDC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAClBC,MAAM,CAACF,CAAC,IAAIA,CAAC,CAACG,MAAM,GAAG,CAAC,IAAI,CAACX,SAAS,CAACY,GAAG,CAACJ,CAAC,CAAC,CAChD,CAAC,CAAC;AACJ;;AAEA;AACA,SAASK,iBAAiBA,CAACC,CAAC,EAAE;EAC5B,OAAO,CAACA,CAAC,IAAI,EAAE,EAAER,KAAK,CAAC,OAAO,CAAC,CAACC,GAAG,CAACQ,CAAC,IAAIA,CAAC,CAACN,IAAI,CAAC,CAAC,CAAC,CAACO,IAAI,CAACD,CAAC,IAAIA,CAAC,CAACJ,MAAM,GAAG,CAAC,CAAC,IAAI,gBAAgB;AAChG;;AAEA;AACA,SAASM,UAAUA,CAACH,CAAC,EAAE;EACrB,OAAOA,CAAC,CAACI,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAACA,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAACA,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAACA,UAAU,CAAC,GAAG,EAAE,QAAQ,CAAC,CAACA,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC;AACtI;;AAEA;AACA,SAASC,WAAWA,CAACC,UAAU,EAAE;EAC/B,MAAMC,KAAK,GAAG,CAACD,UAAU,IAAI,EAAE,EAAEd,KAAK,CAAC,OAAO,CAAC,CAACC,GAAG,CAACe,IAAI,IAAIA,IAAI,CAACb,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAACY,IAAI,IAAIA,IAAI,CAACX,MAAM,GAAG,CAAC,CAAC;EACxG,IAAIY,UAAU,GAAG,EAAE;EACnB,IAAIC,MAAM,GAAG,KAAK;EAElBH,KAAK,CAACI,OAAO,CAACC,OAAO,IAAI;IACvB;IACA,MAAMC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAC/C,eAAe,CAAC,CAACgD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAACN,OAAO,CAAC,CAAC;;IAE3E;IACA,MAAMO,QAAQ,GAAGP,OAAO,CAACQ,KAAK,CAAC,YAAY,CAAC;IAC5C;IACA,MAAMC,WAAW,GAAGlB,UAAU,CAACS,OAAO,CAACU,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;IAEpE,IAAIT,SAAS,EAAE;MACb;MACA,IAAIH,MAAM,EAAED,UAAU,IAAI,SAAS;MACnCC,MAAM,GAAG,KAAK;MACd;MACAD,UAAU,IAAI,+BAA+BY,WAAW,SAAS;IACnE,CAAC,MAAM,IAAIF,QAAQ,EAAE;MACnB;MACA,IAAI,CAACT,MAAM,EAAED,UAAU,IAAI,QAAQ;MACnCC,MAAM,GAAG,IAAI;MACbD,UAAU,IAAI,OAAOY,WAAW,SAAS;IAC3C,CAAC,MAAM;MACL;MACA,IAAIX,MAAM,EAAED,UAAU,IAAI,SAAS;MACnCC,MAAM,GAAG,KAAK;MACdD,UAAU,IAAI,MAAMY,WAAW,QAAQ;IACzC;EACF,CAAC,CAAC;;EAEF;EACA,IAAIX,MAAM,EAAED,UAAU,IAAI,SAAS;EAEnC,OAAOA,UAAU;AACnB;;AAEA;AACA,SAASc,iBAAiBA,CAACjB,UAAU,EAAEkB,cAAc,EAAE;EACrD,MAAMC,KAAK,GAAG,CAAC,CAAC;EAChB,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,WAAW,GAAGrB,UAAU,CAACf,WAAW,CAAC,CAAC;;EAE5C;EACA,MAAMqC,gBAAgB,GAAG,EAAE;EAC3B,MAAMC,cAAc,GAAG,EAAE;EACzB,MAAMC,iBAAiB,GAAG,EAAE;EAC5B,MAAMC,qBAAqB,GAAG,EAAE,CAAC,CAAC;;EAElC;EACAjB,MAAM,CAACkB,OAAO,CAAChE,eAAe,CAAC,CAAC2C,OAAO,CAAC,CAAC,CAACsB,CAAC,EAAEC,GAAG,CAAC,KAAK;IACpD,MAAMC,OAAO,GAAGD,GAAG,CAAChB,IAAI,CAACS,WAAW,CAAC;IACrC,IAAIQ,OAAO,EAAEV,KAAK,CAACQ,CAAC,CAAC,GAAG,IAAI,CAAC,KACxB,IAAIxD,aAAa,CAAC2D,QAAQ,CAACH,CAAC,CAAC,EAAEP,OAAO,CAACW,IAAI,CAACJ,CAAC,CAAC,CAAC,CAAC;EACvD,CAAC,CAAC;EAEF,MAAMK,cAAc,GAAG7D,aAAa,CAACoB,MAAM,GAAG6B,OAAO,CAAC7B,MAAM;EAC5D;EACA,MAAM0C,cAAc,GAAGC,IAAI,CAACC,KAAK,CAAEH,cAAc,GAAG7D,aAAa,CAACoB,MAAM,GAAI+B,gBAAgB,CAAC;;EAE7F;EACA,MAAMc,MAAM,GAAGrD,eAAe,CAACmC,cAAc,CAAC;EAC9C,MAAMmB,OAAO,GAAGD,MAAM,CAAC9C,MAAM,CAACqC,CAAC,IAAIN,WAAW,CAACS,QAAQ,CAACH,CAAC,CAAC,CAAC;EAC3D;EACA,MAAMW,iBAAiB,GAAGF,MAAM,CAAC7C,MAAM,GAAG8C,OAAO,CAAC9C,MAAM,GAAG6C,MAAM,CAAC7C,MAAM,GAAG,CAAC;EAC5E,MAAMgD,YAAY,GAAGL,IAAI,CAACC,KAAK,CAACG,iBAAiB,GAAGf,cAAc,CAAC;;EAEnE;EACA,IAAIiB,aAAa,GAAG,CAAC;EACrB1D,UAAU,CAACuB,OAAO,CAACoC,IAAI,IAAI;IACzB;IACA,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAC,MAAMF,IAAI,CAACzB,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IACvFwB,aAAa,IAAI,CAACnB,WAAW,CAACP,KAAK,CAAC4B,KAAK,CAAC,IAAI,EAAE,EAAEnD,MAAM,CAAC,CAAC;EAC5D,CAAC,CAAC;;EAEF;EACA,MAAMqD,eAAe,GAAGV,IAAI,CAACW,GAAG,CAACX,IAAI,CAACY,KAAK,CAACN,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,EAAEf,qBAAqB,CAAC;EAC1F,MAAMsB,eAAe,GAAGb,IAAI,CAACc,GAAG,CAAC,CAAC,EAAExB,iBAAiB,GAAGoB,eAAe,CAAC;;EAExE;EACA,MAAMK,QAAQ,GAAGf,IAAI,CAACc,GAAG,CAAC,CAAC,EAAEd,IAAI,CAACW,GAAG,CAAC,GAAG,EAAEZ,cAAc,GAAGM,YAAY,GAAGQ,eAAe,CAAC,CAAC;EAC5F,MAAMG,WAAW,GAAGd,MAAM,CAAC9C,MAAM,CAACqC,CAAC,IAAI,CAACN,WAAW,CAACS,QAAQ,CAACH,CAAC,CAAC,CAAC;EAEhE,OAAO;IACLR,KAAK;IAAEC,OAAO;IAAEiB,OAAO;IAAEa,WAAW;IACpCD,QAAQ;IAAEE,QAAQ,EAAEf,MAAM,CAAC7C,MAAM;IACjCiD;EACF,CAAC;AACH;;AAEA;;AAEA,eAAe,SAASY,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAM,CAACrD,UAAU,EAAEsD,aAAa,CAAC,GAAGlG,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC8D,cAAc,EAAEqC,iBAAiB,CAAC,GAAGnG,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACoG,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrG,QAAQ,CAACgB,gBAAgB,CAACC,MAAM,CAACC,EAAE,CAAC;EACpF,MAAM,CAACoF,QAAQ,EAAEC,WAAW,CAAC,GAAGvG,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACwG,SAAS,EAAEC,YAAY,CAAC,GAAGzG,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC0G,YAAY,EAAEC,eAAe,CAAC,GAAG3G,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC4G,aAAa,EAAEC,gBAAgB,CAAC,GAAG7G,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE3D,MAAM8G,UAAU,GAAG/G,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMgH,YAAY,GAAGhH,MAAM,CAAC,IAAI,CAAC;;EAEjC;EACA,MAAMiH,UAAU,GAAIC,IAAI,IAAK;IAC3BR,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI,CAACQ,IAAI,EAAE;IAEX,IAAIA,IAAI,CAACC,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,EAAE;MAC/BT,YAAY,CAAC,2BAA2B,CAAC;MACzCP,aAAa,CAAC,EAAE,CAAC;MACjB;IACF;;IAEA;IACA,IAAIe,IAAI,CAACE,IAAI,KAAK,iBAAiB,EAAE;MACnCV,YAAY,CAAC,0FAA0F,CAAC;MACxGP,aAAa,CAAC,ikBAAikB,CAAC;MAChlB;IACF;IAEA,IAAIe,IAAI,CAACE,IAAI,KAAK,YAAY,EAAE;MAC9BV,YAAY,CAAC,mDAAmD,CAAC;MACjEP,aAAa,CAAC,EAAE,CAAC;MACjB;IACF;;IAEA;IACA,MAAMkB,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAGC,CAAC,IAAIrB,aAAa,CAACsB,MAAM,CAACD,CAAC,CAACE,MAAM,CAACC,MAAM,IAAI,EAAE,CAAC,CAAC;IACjEN,MAAM,CAACO,UAAU,CAACV,IAAI,CAAC;EACzB,CAAC;;EAED;EACApH,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAAC+C,UAAU,EAAE;MAAE2D,WAAW,CAAC,IAAI,CAAC;MAAE;IAAQ;IAC9C,MAAMqB,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;IACnCvB,WAAW,CAAC1C,iBAAiB,CAACjB,UAAU,EAAEkB,cAAc,CAAC,CAAC;IAC1D,MAAMiE,OAAO,GAAGF,WAAW,CAACC,GAAG,CAAC,CAAC;IACjCE,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAACF,OAAO,GAAGH,SAAS,EAAEM,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;EACrF,CAAC,EAAE,CAACtF,UAAU,EAAEkB,cAAc,CAAC,CAAC;;EAEhC;EACA,MAAMqE,QAAQ,GAAGrI,OAAO,CAAC,MAAM;IAC7B,IAAI,CAACwG,QAAQ,EAAE,OAAO,EAAE;IACxB,MAAM8B,IAAI,GAAG,EAAE;IACf,MAAM;MAAEvC,QAAQ;MAAE7B,OAAO;MAAE+B,QAAQ;MAAEd,OAAO;MAAEG,aAAa;MAAEU;IAAY,CAAC,GAAGQ,QAAQ;;IAErF;IACA,IAAItC,OAAO,CAAC7B,MAAM,GAAG,CAAC,EAAE;MACtBiG,IAAI,CAACzD,IAAI,CAAC,wDAAwDX,OAAO,CAACjC,GAAG,CAACO,CAAC,IAAIA,CAAC,CAAC+F,WAAW,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC;IAC9I,CAAC,MAAM;MACLF,IAAI,CAACzD,IAAI,CAAC,yDAAyD,CAAC,CAAC,CAAC;IACxE;;IAEA;IACA,MAAM4D,QAAQ,GAAGxC,QAAQ,GAAGjB,IAAI,CAACC,KAAK,CAAEE,OAAO,CAAC9C,MAAM,GAAG4D,QAAQ,GAAI,GAAG,CAAC,GAAG,GAAG;IAC/E,IAAIA,QAAQ,KAAK,CAAC,EAAE;MAClBqC,IAAI,CAACzD,IAAI,CAAC,gFAAgF,CAAC,CAAC,CAAC;IAC/F,CAAC,MAAM,IAAI4D,QAAQ,GAAG,EAAE,EAAE;MACxBH,IAAI,CAACzD,IAAI,CAAC,yBAAyB4D,QAAQ,oEAAoEzC,WAAW,CAAC0C,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACF,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;IACpK,CAAC,MAAM,IAAIC,QAAQ,GAAG,EAAE,EAAE;MACxBH,IAAI,CAACzD,IAAI,CAAC,sBAAsB4D,QAAQ,+DAA+D,CAAC,CAAC,CAAC;IAC5G,CAAC,MAAM;MACLH,IAAI,CAACzD,IAAI,CAAC,mBAAmB4D,QAAQ,kCAAkC,CAAC,CAAC,CAAC;IAC5E;;IAEA;IACA,IAAInD,aAAa,GAAG,CAAC,EAAE;MACrB;MACA,MAAMqD,WAAW,GAAGxD,OAAO,CAAC/C,MAAM,CAACqC,CAAC,IAAIA,CAAC,CAACpC,MAAM,GAAG,CAAC,IAAIuG,KAAK,CAACC,QAAQ,CAACpE,CAAC,CAAC,CAAC,CAAC,CAACiE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MACvF,MAAMI,WAAW,GAAGH,WAAW,CAACtG,MAAM,GAAG,CAAC,GAAGsG,WAAW,CAACH,IAAI,CAAC,IAAI,CAAC,GAAG,yBAAyB;MAE/FF,IAAI,CAACzD,IAAI,CAAC,0CAA0CS,aAAa,8GAA8GwD,WAAW,YAAY,CAAC,CAAC,CAAC;IAC3M,CAAC,MAAM;MACLR,IAAI,CAACzD,IAAI,CAAC,6CAA6C,CAAC,CAAC,CAAC;IAC5D;;IAEA;IACAyD,IAAI,CAACzD,IAAI,CAAC,+BAA+BkB,QAAQ,8CAA8C,CAAC,CAAC,CAAC;;IAElG,OAAOuC,IAAI;EACb,CAAC,EAAE,CAAC9B,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMuC,sBAAsB,GAAG/I,OAAO,CAAC,MAAM;IAC3C,IAAI,CAACwG,QAAQ,EAAE,OAAO,IAAI;IAC1B,MAAM;MAAET;IAAS,CAAC,GAAGS,QAAQ;IAE7B,IAAIT,QAAQ,IAAI,EAAE,EAAE,OAAO7E,gBAAgB,CAACC,MAAM,CAACC,EAAE,CAAC,CAAC;IACvD,IAAI2E,QAAQ,IAAI,EAAE,EAAE,OAAO7E,gBAAgB,CAACM,OAAO,CAACJ,EAAE,CAAC,CAAC;IACxD,OAAOF,gBAAgB,CAACO,QAAQ,CAACL,EAAE,CAAC,CAAC;EACvC,CAAC,EAAE,CAACoF,QAAQ,CAAC,CAAC;EAEd,MAAMwC,aAAa,GAAGhJ,OAAO,CAAC,MAAMuC,iBAAiB,CAACO,UAAU,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAChF,MAAMmG,QAAQ,GAAGjJ,OAAO,CAAC,MAAM6C,WAAW,CAACC,UAAU,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;;EAErE;EACA,MAAMoG,eAAe,GAAGhI,gBAAgB,CAACoF,gBAAgB,CAAC,IAAIpF,gBAAgB,CAACC,MAAM;;EAGrF;EACA,MAAMgI,aAAa,GAAGhJ,WAAW,CAAC,MAAM;IACtC,OAAO,IAAIiJ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAIC,MAAM,CAACC,KAAK,IAAID,MAAM,CAACE,WAAW,EAAE,OAAOJ,OAAO,CAAC,CAAC;MAExD,MAAMK,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MACpDF,WAAW,CAACG,GAAG,GAAG,qEAAqE;MACvFH,WAAW,CAACI,OAAO,GAAG,MAAMR,MAAM,CAAC,IAAIS,KAAK,CAAC,uBAAuB,CAAC,CAAC;MACtEL,WAAW,CAAClC,MAAM,GAAG,MAAM;QACzB,MAAMwC,iBAAiB,GAAGL,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;QAC1DI,iBAAiB,CAACH,GAAG,GAAG,6EAA6E;QACrGG,iBAAiB,CAACF,OAAO,GAAG,MAAMR,MAAM,CAAC,IAAIS,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAClFC,iBAAiB,CAACxC,MAAM,GAAG6B,OAAO;QAClCM,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACF,iBAAiB,CAAC;MAC9C,CAAC;MACDL,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,WAAW,CAAC;IACxC,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMS,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACnD,UAAU,CAACoD,OAAO,EAAE;IAEzBvD,eAAe,CAAC,IAAI,CAAC;IACrB,IAAIwD,aAAa,GAAG,EAAE,CAAC,CAAC;IACxB,MAAMC,IAAI,GAAGtD,UAAU,CAACoD,OAAO;IAE/B,IAAI;MACF,MAAMjB,aAAa,CAAC,CAAC;;MAErB;MACAkB,aAAa,GAAGC,IAAI,CAAChJ,SAAS;MAC9B;MACAgJ,IAAI,CAAChJ,SAAS,GAAG,gBAAgB4H,eAAe,CAAC5H,SAAS,eAAe;;MAEzE;MACA,MAAMiJ,MAAM,GAAG,MAAMhB,MAAM,CAACE,WAAW,CAACa,IAAI,EAAE;QAC5CE,KAAK,EAAE,CAAC;QACRC,eAAe,EAAE,MAAM;QACvBC,OAAO,EAAE;MACX,CAAC,CAAC;MACF,MAAMC,OAAO,GAAGJ,MAAM,CAACK,SAAS,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;;MAEtD;MACA,MAAM;QAAEpB;MAAM,CAAC,GAAGD,MAAM;MACxB,MAAMsB,GAAG,GAAG,IAAIrB,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;MACtC,MAAMsB,SAAS,GAAGD,GAAG,CAACE,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,CAAC;MAClD,MAAMC,UAAU,GAAGL,GAAG,CAACE,QAAQ,CAACC,QAAQ,CAACG,SAAS,CAAC,CAAC;MACpD,MAAMC,SAAS,GAAIb,MAAM,CAACc,MAAM,GAAGP,SAAS,GAAIP,MAAM,CAACe,KAAK;;MAE5D;MACA,IAAIC,CAAC,GAAG,CAAC;QAAEC,eAAe,GAAGJ,SAAS;MACtC,OAAOI,eAAe,GAAG,CAAC,EAAE;QAC1B;QACA,IAAID,CAAC,GAAG,CAAC,EAAEV,GAAG,CAACY,OAAO,CAAC,CAAC;;QAExB;QACAZ,GAAG,CAACa,QAAQ,CAACf,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,CAACY,CAAC,EAAET,SAAS,EAAEM,SAAS,CAAC;QAE1DI,eAAe,IAAIN,UAAU;QAC7BK,CAAC,IAAIL,UAAU;MACjB;MAEA,MAAMS,QAAQ,GAAG,GAAG3C,aAAa,CAAClF,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,IAAIwC,gBAAgB,aAAa;;MAEtF;MACAuE,GAAG,CAACe,IAAI,CAACD,QAAQ,CAAC;IAEpB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ3D,OAAO,CAAC4D,KAAK,CAAC,0BAA0B,EAAED,GAAG,CAAC;MAC9CE,KAAK,CAAC,wEAAwEF,GAAG,CAACG,OAAO,GAAG,CAAC;IAC/F,CAAC,SAAS;MACRnF,eAAe,CAAC,KAAK,CAAC;MACtB;MACA,IAAIwD,aAAa,EAAEC,IAAI,CAAChJ,SAAS,GAAG+I,aAAa;IACnD;EACF,CAAC;EAGD,oBACEhK,OAAA,CAACP,KAAK,CAACQ,QAAQ;IAAA2L,QAAA,gBACb5L,OAAA;MAASiB,SAAS,EAAC,WAAW;MAAA2K,QAAA,gBAC5B5L,OAAA;QAAKiB,SAAS,EAAC,QAAQ;QAAA2K,QAAA,gBAErB5L,OAAA;UAAKiB,SAAS,EAAC,MAAM;UAAA2K,QAAA,gBACnB5L,OAAA;YAAIiB,SAAS,EAAC,eAAe;YAAA2K,QAAA,EAAC;UAAyB;YAAAN,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5D/L,OAAA;YAAKiB,SAAS,EAAC,iBAAiB;YAC9B+K,MAAM,EAAE5E,CAAC,IAAI;cAAEA,CAAC,CAAC6E,cAAc,CAAC,CAAC;cAAE7E,CAAC,CAAC8E,eAAe,CAAC,CAAC;cAAE,IAAI9E,CAAC,CAAC+E,YAAY,CAACC,KAAK,CAACpK,MAAM,GAAG,CAAC,EAAE6E,UAAU,CAACO,CAAC,CAAC+E,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;YAAE,CAAE;YACpIC,UAAU,EAAEjF,CAAC,IAAI;cAAEA,CAAC,CAAC6E,cAAc,CAAC,CAAC;cAAE7E,CAAC,CAAC8E,eAAe,CAAC,CAAC;YAAE,CAAE;YAAAN,QAAA,gBAE9D5L,OAAA;cAAGiB,SAAS,EAAC,eAAe;cAAA2K,QAAA,EAAC;YAAyC;cAAAN,QAAA,EAAAO,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,eAC1E/L,OAAA;cACEsM,GAAG,EAAE1F,YAAa;cAClBI,IAAI,EAAC,MAAM;cACXuF,MAAM,EAAC,sBAAsB;cAC7BC,KAAK,EAAE;gBAAEC,OAAO,EAAE;cAAO,CAAE;cAC3BC,QAAQ,EAAEtF,CAAC;gBAAA,IAAAuF,eAAA;gBAAA,OAAI9F,UAAU,EAAA8F,eAAA,GAACvF,CAAC,CAACE,MAAM,CAAC8E,KAAK,cAAAO,eAAA,uBAAdA,eAAA,CAAiB,CAAC,CAAC,CAAC;cAAA;YAAC;cAAArB,QAAA,EAAAO,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChD,CAAC,eACF/L,OAAA;cAAQgH,IAAI,EAAC,QAAQ;cAAC/F,SAAS,EAAC,qBAAqB;cAAC2L,OAAO,EAAEA,CAAA,KAAMhG,YAAY,CAACmD,OAAO,CAAC8C,KAAK,CAAC,CAAE;cAAAjB,QAAA,EAAC;YAAW;cAAAN,QAAA,EAAAO,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACtH1F,SAAS,iBAAIrG,OAAA;cAAGiB,SAAS,EAAC,iBAAiB;cAAA2K,QAAA,EAAEvF;YAAS;cAAAiF,QAAA,EAAAO,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAT,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzD,CAAC,eACN/L,OAAA;YAAUiB,SAAS,EAAC,0BAA0B;YAC5C6L,WAAW,EAAC,oEAAoE;YAChFC,KAAK,EAAEtK,UAAW;YAClBiK,QAAQ,EAAEtF,CAAC,IAAIrB,aAAa,CAACqB,CAAC,CAACE,MAAM,CAACyF,KAAK;UAAE;YAAAzB,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9C,CAAC;QAAA;UAAAT,QAAA,EAAAO,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAGN/L,OAAA;UAAKiB,SAAS,EAAC,MAAM;UAAA2K,QAAA,gBACnB5L,OAAA;YAAIiB,SAAS,EAAC,eAAe;YAAA2K,QAAA,EAAC;UAAwC;YAAAN,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3E/L,OAAA;YAAUiB,SAAS,EAAC,qBAAqB;YAAC6L,WAAW,EAAC,+BAA+B;YAACC,KAAK,EAAEpJ,cAAe;YAAC+I,QAAQ,EAAEtF,CAAC,IAAIpB,iBAAiB,CAACoB,CAAC,CAACE,MAAM,CAACyF,KAAK;UAAE;YAAAzB,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACjK/L,OAAA;YAAGiB,SAAS,EAAC,MAAM;YAAA2K,QAAA,EAAC;UAAkG;YAAAN,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAT,QAAA,EAAAO,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvH,CAAC;MAAA;QAAAT,QAAA,EAAAO,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAELtJ,UAAU,iBACTzC,OAAA,CAAAE,SAAA;QAAA0L,QAAA,gBAEE5L,OAAA;UAAKiB,SAAS,EAAC,MAAM;UAAA2K,QAAA,gBACnB5L,OAAA;YAAIiB,SAAS,EAAC,eAAe;YAAA2K,QAAA,EAAC;UAAkB;YAAAN,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrD/L,OAAA;YAAKiB,SAAS,EAAC,eAAe;YAAA2K,QAAA,EAC3B3I,MAAM,CAACC,MAAM,CAACrC,gBAAgB,CAAC,CAACe,GAAG,CAAEoL,CAAC,iBACrChN,OAAA;cAAmBgH,IAAI,EAAC,QAAQ;cAAC/F,SAAS,EAAE,iBAAiBgF,gBAAgB,KAAK+G,CAAC,CAACjM,EAAE,GAAG,UAAU,GAAG,EAAE,EAAG;cAAC6L,OAAO,EAAEA,CAAA,KAAM1G,mBAAmB,CAAC8G,CAAC,CAACjM,EAAE,CAAE;cAACkM,KAAK,EAAED,CAAC,CAAChM,IAAK;cAAA4K,QAAA,gBAClK5L,OAAA;gBAAKiB,SAAS,EAAE,mBAAmB+L,CAAC,CAAC/L,SAAS;cAAG;gBAAAqK,QAAA,EAAAO,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACxD/L,OAAA;gBAAKiB,SAAS,EAAC,eAAe;gBAAA2K,QAAA,EAAEoB,CAAC,CAAChM;cAAI;gBAAAsK,QAAA,EAAAO,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA,GAFlCiB,CAAC,CAACjM,EAAE;cAAAuK,QAAA,EAAAO,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAGT,CACT;UAAC;YAAAT,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAT,QAAA,EAAAO,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,EAGL5F,QAAQ,iBACPnG,OAAA;UAAKiB,SAAS,EAAC,MAAM;UAAA2K,QAAA,gBACnB5L,OAAA;YAAIiB,SAAS,EAAC,eAAe;YAAA2K,QAAA,GAAC,oCAAwB,EAACzF,QAAQ,CAACT,QAAQ,EAAC,IAAE;UAAA;YAAA4F,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChF/L,OAAA;YAAKiB,SAAS,EAAC,WAAW;YAAA2K,QAAA,gBAExB5L,OAAA;cAAKiB,SAAS,EAAC,YAAY;cAACuL,KAAK,EAAE;gBAAE,OAAO,EAAE,GAAGrG,QAAQ,CAACT,QAAQ,GAAG;gBAAE,cAAc,EAAES,QAAQ,CAACT,QAAQ,IAAI,EAAE,GAAG,WAAW,GAAGS,QAAQ,CAACT,QAAQ,IAAI,EAAE,GAAG,aAAa,GAAG;cAAa,CAAE;cAAAkG,QAAA,gBACtL5L,OAAA;gBAAKiB,SAAS,EAAC,WAAW;gBAAA2K,QAAA,EAAEzF,QAAQ,CAACT;cAAQ;gBAAA4F,QAAA,EAAAO,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACpD/L,OAAA;gBAAKiB,SAAS,EAAC,aAAa;gBAAA2K,QAAA,EAAC;cAAK;gBAAAN,QAAA,EAAAO,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA;cAAAT,QAAA,EAAAO,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrC,CAAC,eACN/L,OAAA;cAAKiB,SAAS,EAAC,iBAAiB;cAAA2K,QAAA,gBAC9B5L,OAAA;gBAAA4L,QAAA,EAAI;cAAsB;gBAAAN,QAAA,EAAAO,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC/B/L,OAAA;gBAAIiB,SAAS,EAAC,eAAe;gBAAA2K,QAAA,EAC1B5D,QAAQ,CAACpG,GAAG,CAAC,CAACsL,CAAC,EAAEC,CAAC,kBAAKnN,OAAA;kBAAYoN,uBAAuB,EAAE;oBAAEC,MAAM,EAAEH;kBAAE;gBAAE,GAA1CC,CAAC;kBAAA7B,QAAA,EAAAO,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAA2C,CAAC;cAAC;gBAAAT,QAAA,EAAAO,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC7E,CAAC,EAEJrD,sBAAsB,IAAIzC,gBAAgB,KAAKyC,sBAAsB,iBACpE1I,OAAA;gBAAGiB,SAAS,EAAC,oCAAoC;gBAAA2K,QAAA,GAAC,+CACH,EAAC/K,gBAAgB,CAAC6H,sBAAsB,CAAC,CAAC1H,IAAI,EAAC,sDAC5F,eAAAhB,OAAA;kBAAQgH,IAAI,EAAC,QAAQ;kBAAC/F,SAAS,EAAC,aAAa;kBAAC2L,OAAO,EAAEA,CAAA,KAAM1G,mBAAmB,CAACwC,sBAAsB,CAAE;kBAAAkD,QAAA,EAAC;gBAAK;kBAAAN,QAAA,EAAAO,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAT,QAAA,EAAAO,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACvH,CACJ;YAAA;cAAAT,QAAA,EAAAO,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC;UAAA;YAAAT,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACN/L,OAAA;YAAKiB,SAAS,EAAC,SAAS;YAAA2K,QAAA,gBACtB5L,OAAA;cAAQiB,SAAS,EAAC,aAAa;cAAC2L,OAAO,EAAE9C,cAAe;cAACwD,QAAQ,EAAE/G,YAAa;cAAAqF,QAAA,EAC7ErF,YAAY,GAAG,mBAAmB,GAAG,gBAAgBsC,eAAe,CAAC7H,IAAI;YAAU;cAAAsK,QAAA,EAAAO,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9E,CAAC,eACT/L,OAAA;cAAGiB,SAAS,EAAC,YAAY;cAAA2K,QAAA,EAAC;YAAqE;cAAAN,QAAA,EAAAO,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC;UAAA;YAAAT,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChG,CAAC;QAAA;UAAAT,QAAA,EAAAO,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN,eAGD/L,OAAA;UAAKsM,GAAG,EAAE3F,UAAW;UAAC1F,SAAS,EAAE,gBAAgB4H,eAAe,CAAC5H,SAAS,EAAG;UAACuL,KAAK,EAAE;YAAEe,UAAU,EAAE1E,eAAe,CAAC3H;UAAU,CAAE;UAAA0K,QAAA,gBAE7H5L,OAAA;YAAKiB,SAAS,EAAC,0BAA0B;YAAA2K,QAAA,EAAC;UAAgC;YAAAN,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAChF/L,OAAA;YAAKiB,SAAS,EAAC,cAAc;YAAA2K,QAAA,gBAC3B5L,OAAA;cAAKiB,SAAS,EAAC,QAAQ;cAAA2K,QAAA,EAAEjD,aAAa,CAACN,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACH,WAAW,CAAC;YAAC;cAAAoD,QAAA,EAAAO,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACvE/L,OAAA;cAAKiB,SAAS,EAAC,UAAU;cAAA2K,QAAA,gBACvB5L,OAAA;gBAAIiB,SAAS,EAAC,MAAM;gBAAA2K,QAAA,EAAEjD;cAAa;gBAAA2C,QAAA,EAAAO,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACzC/L,OAAA;gBAAKiB,SAAS,EAAC,SAAS;gBAAA2K,QAAA,GAAE/C,eAAe,CAAC7H,IAAI,EAAC,WAAS;cAAA;gBAAAsK,QAAA,EAAAO,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA;cAAAT,QAAA,EAAAO,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3D,CAAC;UAAA;YAAAT,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eACN/L,OAAA;YAAKiB,SAAS,EAAC,YAAY;YAACmM,uBAAuB,EAAE;cAAEC,MAAM,EAAEzE;YAAS;UAAE;YAAA0C,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAT,QAAA,EAAAO,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1E,CAAC;MAAA,eACN,CACH;IAAA;MAAAT,QAAA,EAAAO,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM,CAAC,eAGV/L,OAAA;MACEgH,IAAI,EAAC,QAAQ;MACb/F,SAAS,EAAE,OAAOwF,aAAa,GAAG,YAAY,GAAG,EAAE,EAAG;MACtDmG,OAAO,EAAEA,CAAA,KAAMlG,gBAAgB,CAAC,CAACD,aAAa,CAAE;MAChDwG,KAAK,EAAExG,aAAa,GAAG,eAAe,GAAG,cAAe;MAAAmF,QAAA,EAEvDnF,aAAa,GAAG,GAAG,GAAG;IAAI;MAAA6E,QAAA,EAAAO,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,eAGT/L,OAAA;MAAKiB,SAAS,EAAE,qBAAqBwF,aAAa,GAAG,MAAM,GAAG,EAAE,EAAG;MAAAmF,QAAA,eACjE5L,OAAA;QAAKiB,SAAS,EAAC,SAAS;QAAA2K,QAAA,gBACtB5L,OAAA;UAAKiB,SAAS,EAAC,aAAa;UAAA2K,QAAA,gBAC1B5L,OAAA;YAAA4L,QAAA,EAAI;UAAmB;YAAAN,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5B/L,OAAA;YAAQiB,SAAS,EAAC,GAAG;YAAC2L,OAAO,EAAEA,CAAA,KAAMlG,gBAAgB,CAAC,KAAK,CAAE;YAACuG,KAAK,EAAC,YAAY;YAAArB,QAAA,EAAC;UAAC;YAAAN,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAT,QAAA,EAAAO,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxF,CAAC,eACN/L,OAAA;UAAKiB,SAAS,EAAC,eAAe;UAAA2K,QAAA,eAC5B5L,OAAA;YAAKiB,SAAS,EAAC,kBAAkB;YAAA2K,QAAA,EAAC;UAA6F;YAAAN,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAAC;UAAAT,QAAA,EAAAO,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAElI,CAAC,eACN/L,OAAA;UAAKiB,SAAS,EAAC,gBAAgB;UAAA2K,QAAA,gBAC7B5L,OAAA;YAAOgH,IAAI,EAAC,MAAM;YAAC8F,WAAW,EAAC,sBAAsB;YAACQ,QAAQ;UAAA;YAAAhC,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACjE/L,OAAA;YAAQsN,QAAQ;YAAA1B,QAAA,EAAC;UAAI;YAAAN,QAAA,EAAAO,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAT,QAAA,EAAAO,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC;MAAA;QAAAT,QAAA,EAAAO,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAT,QAAA,EAAAO,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAT,QAAA,EAAAO,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAErB;;AAEA;AACA;AACA;AAAAjG,EAAA,CArUwBD,cAAc;AAAA2H,EAAA,GAAd3H,cAAc;AAAA,IAAA2H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}