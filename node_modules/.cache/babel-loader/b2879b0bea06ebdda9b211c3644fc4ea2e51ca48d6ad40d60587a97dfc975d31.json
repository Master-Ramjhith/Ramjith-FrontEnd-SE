{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smscp\\\\Desktop\\\\Ram\\\\PESU 5th sem Project\\\\SE project\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\n\n// Static responses for the dummy chatbot\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RESPONSES = {\n  greeting: \"Hello! Iâ€™m your Resume Assistant ðŸ‘‹ How can I help you improve your ATS score?\",\n  ats: \"ATS scans for keywords, clean structure, and standard headings. Tailor your resume to the JD to beat it.\",\n  keywords: \"Pick high-signal JD terms, use action verbs, and quantify results (%, $, time).\",\n  format: \"Keep it simple: standard fonts, headings, bullets, consistent dates, no tables/graphics.\",\n  sections: \"Must-have sections for high ATS: Contact, Summary, Experience, Skills, Education. Add Projects/Certs if relevant.\",\n  default: \"I can help with general advice on ATS, keywords, formatting, or required sections. Ask me about your score breakdown!\"\n};\nconst GEMINI_API_KEY = \"AIzaSyCMYr8AiCA1yweQZTogNei_fCz203hYwOE\"; // Replace with your Gemini API key\n\nexport default function Chatbot({\n  onClose\n}) {\n  _s();\n  const [messages, setMessages] = useState([{\n    type: \"bot\",\n    text: RESPONSES.greeting\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Fallback logic for static responses\n  const replyFor = useCallback(text => {\n    const t = text.toLowerCase();\n    if (t.includes(\"score\") || t.includes(\"suggestions\") || t.includes(\"breakdown\")) return \"To get a *detailed* breakdown and context-aware suggestions, you need to first upload your resume and run the analysis on the main page. I can then pull that data!\";\n    if (t.includes(\"ats\")) return RESPONSES.ats;\n    if (t.includes(\"keyword\")) return RESPONSES.keywords;\n    if (t.includes(\"format\")) return RESPONSES.format;\n    if (t.includes(\"section\")) return RESPONSES.sections;\n    if (t.includes(\"hello\") || t.includes(\"hi\")) return RESPONSES.greeting;\n    return RESPONSES.default;\n  }, []);\n\n  // Gemini API call logic with fallback\n  const getBotReply = async text => {\n    try {\n      const url = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=\" + GEMINI_API_KEY;\n      const payload = {\n        contents: [{\n          parts: [{\n            text\n          }]\n        }]\n      };\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      const data = await response.json();\n      if (data && data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {\n        // Gemini response format\n        return data.candidates[0].content.parts.map(p => p.text).join(\" \");\n      } else if (data.error) {\n        return replyFor(text) + `<br/><em>(Gemini API error: ${data.error.message})</em>`;\n      }\n      return replyFor(text);\n    } catch (err) {\n      return replyFor(text) + \"<br/><em>(Could not connect to Gemini API)</em>\";\n    }\n  };\n  const send = async () => {\n    const text = input.trim();\n    if (!text) return;\n    setMessages(prev => [...prev, {\n      type: \"user\",\n      text\n    }]);\n    setInput(\"\");\n    setLoading(true);\n\n    // Show \"typing...\" message for effect\n    setMessages(prev => [...prev, {\n      type: \"bot\",\n      text: \"<em>Typingâ€¦</em>\"\n    }]);\n    let reply = await getBotReply(text);\n\n    // Remove \"typing...\" and show actual reply\n    setMessages(prev => [...prev.slice(0, -1), {\n      type: \"bot\",\n      text: reply\n    }]);\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-overlay\",\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83E\\uDD16 Resume Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"x\",\n          onClick: onClose,\n          \"aria-label\": \"Close\",\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [messages.map((m, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${m.type}`,\n          dangerouslySetInnerHTML: {\n            __html: m.text.replace(/\\*(.*?)\\*/g, \"<strong>$1</strong>\")\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          autoFocus: true,\n          value: input,\n          disabled: loading,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && send(),\n          placeholder: \"Ask about ATS, keywords, format\\u2026\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: send,\n          disabled: loading,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"6J+Gg6yYeBoKuw5RORizaZaJyWs=\");\n_c = Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","jsxDEV","_jsxDEV","RESPONSES","greeting","ats","keywords","format","sections","default","GEMINI_API_KEY","Chatbot","onClose","_s","messages","setMessages","type","text","input","setInput","loading","setLoading","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","replyFor","t","toLowerCase","includes","getBotReply","url","payload","contents","parts","response","fetch","method","headers","body","JSON","stringify","data","json","candidates","content","map","p","join","error","message","err","send","trim","prev","reply","slice","className","onClick","children","e","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","m","i","dangerouslySetInnerHTML","__html","replace","ref","autoFocus","value","disabled","onChange","target","onKeyDown","key","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/smscp/Desktop/Ram/PESU 5th sem Project/SE project/src/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\n\r\n// Static responses for the dummy chatbot\r\nconst RESPONSES = {\r\n  greeting: \"Hello! Iâ€™m your Resume Assistant ðŸ‘‹ How can I help you improve your ATS score?\",\r\n  ats: \"ATS scans for keywords, clean structure, and standard headings. Tailor your resume to the JD to beat it.\",\r\n  keywords: \"Pick high-signal JD terms, use action verbs, and quantify results (%, $, time).\",\r\n  format: \"Keep it simple: standard fonts, headings, bullets, consistent dates, no tables/graphics.\",\r\n  sections: \"Must-have sections for high ATS: Contact, Summary, Experience, Skills, Education. Add Projects/Certs if relevant.\",\r\n  default: \"I can help with general advice on ATS, keywords, formatting, or required sections. Ask me about your score breakdown!\",\r\n};\r\n\r\nconst GEMINI_API_KEY = \"AIzaSyCMYr8AiCA1yweQZTogNei_fCz203hYwOE\"; // Replace with your Gemini API key\r\n\r\nexport default function Chatbot({ onClose }) {\r\n  const [messages, setMessages] = useState([{ type: \"bot\", text: RESPONSES.greeting }]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  // Fallback logic for static responses\r\n  const replyFor = useCallback((text) => {\r\n    const t = text.toLowerCase();\r\n    if (t.includes(\"score\") || t.includes(\"suggestions\") || t.includes(\"breakdown\")) return \"To get a *detailed* breakdown and context-aware suggestions, you need to first upload your resume and run the analysis on the main page. I can then pull that data!\";\r\n    if (t.includes(\"ats\")) return RESPONSES.ats;\r\n    if (t.includes(\"keyword\")) return RESPONSES.keywords;\r\n    if (t.includes(\"format\")) return RESPONSES.format;\r\n    if (t.includes(\"section\")) return RESPONSES.sections;\r\n    if (t.includes(\"hello\") || t.includes(\"hi\")) return RESPONSES.greeting;\r\n    return RESPONSES.default;\r\n  }, []);\r\n\r\n  // Gemini API call logic with fallback\r\n  const getBotReply = async (text) => {\r\n    try {\r\n      const url =\"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=\" + \r\n GEMINI_API_KEY;\r\n      const payload = {\r\n        contents: [{ parts: [{ text }] }],\r\n      };\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      const data = await response.json();\r\n      if (data && data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts) {\r\n        // Gemini response format\r\n        return data.candidates[0].content.parts.map((p) => p.text).join(\" \");\r\n      } else if (data.error) {\r\n        return replyFor(text) + `<br/><em>(Gemini API error: ${data.error.message})</em>`;\r\n      }\r\n      return replyFor(text);\r\n    } catch (err) {\r\n      return replyFor(text) + \"<br/><em>(Could not connect to Gemini API)</em>\";\r\n    }\r\n  };\r\n\r\n  const send = async () => {\r\n    const text = input.trim();\r\n    if (!text) return;\r\n    setMessages((prev) => [...prev, { type: \"user\", text }]);\r\n    setInput(\"\");\r\n    setLoading(true);\r\n\r\n    // Show \"typing...\" message for effect\r\n    setMessages((prev) => [...prev, { type: \"bot\", text: \"<em>Typingâ€¦</em>\" }]);\r\n    let reply = await getBotReply(text);\r\n\r\n    // Remove \"typing...\" and show actual reply\r\n    setMessages((prev) => [\r\n      ...prev.slice(0, -1),\r\n      { type: \"bot\", text: reply },\r\n    ]);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-overlay\" onClick={onClose}>\r\n      <div className=\"chatbot\" onClick={(e) => e.stopPropagation()}>\r\n        <div className=\"chat-header\">\r\n          <h3>ðŸ¤– Resume Assistant</h3>\r\n          <button className=\"x\" onClick={onClose} aria-label=\"Close\">âœ•</button>\r\n        </div>\r\n        <div className=\"chat-messages\">\r\n          {messages.map((m, i) => (\r\n            <div\r\n              key={i}\r\n              className={`chat-message ${m.type}`}\r\n              dangerouslySetInnerHTML={{\r\n                __html: m.text.replace(/\\*(.*?)\\*/g, \"<strong>$1</strong>\"),\r\n              }}\r\n            />\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n        <div className=\"chat-input-row\">\r\n          <input\r\n            autoFocus\r\n            value={input}\r\n            disabled={loading}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyDown={(e) => e.key === \"Enter\" && send()}\r\n            placeholder=\"Ask about ATS, keywords, formatâ€¦\"\r\n          />\r\n          <button onClick={send} disabled={loading}>Send</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}