{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smscp\\\\Desktop\\\\PESU 5th sem Project\\\\SE project\\\\src\\\\Auth.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n\n// /**\n//  * Dummy Authentication Component for Login/Register.\n//  * @param {object} props - Component props.\n//  * @param {function} props.onLogin - Callback function to execute upon successful dummy login.\n//  */\n// export default function Auth({ onLogin }) {\n//   const [isLogin, setIsLogin] = useState(true); // Toggle between Login and Register views\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     // Dummy authentication logic: simply checks if fields are non-empty.\n//     // In a real application, this would involve API calls.\n//     if (email.trim() && password.trim()) {\n//       alert(isLogin ? \"Dummy Login Successful!\" : \"Dummy Registration Successful!\");\n//       // Simulate successful authentication and call the onLogin handler.\n//       onLogin(email); \n//     } else {\n//       alert(\"Please enter both email and password.\");\n//     }\n//   };\n\n//   const formTitle = isLogin ? \"Login\" : \"Register\";\n\n//   return (\n//     <div className=\"auth-container\">\n//       <div className=\"card auth-card\">\n//         <h2 className=\"section-title center\">{formTitle} to use Resume Analyzer</h2>\n//         <form onSubmit={handleSubmit}>\n//           <input\n//             className=\"text-input\"\n//             type=\"email\"\n//             placeholder=\"Email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             required\n//           />\n//           <input\n//             className=\"text-input\"\n//             type=\"password\"\n//             placeholder=\"Password (DRA-SR-003: Strong required)\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//             required\n//           />\n//           <button type=\"submit\" className=\"btn primary full-width\">\n//             {formTitle}\n//           </button>\n//         </form>\n//         <div className=\"switch-auth center\">\n//           {isLogin ? \"Need an account?\" : \"Already have an account?\"}\n//           <button className=\"link-button\" onClick={() => setIsLogin(!isLogin)} type=\"button\">\n//             {isLogin ? \"Register\" : \"Login\"}\n//           </button>\n//         </div>\n//         <p className=\"hint center mt-1\">\n//           <small>\n//             Authentication required for data security (DRA-SR-003). All data is dummy/local for this frontend demo.\n//           </small>\n//         </p>\n//       </div>\n//     </div>\n//   );\n// }\n\n// // Add necessary CSS for Auth.js to App.css (see section 4)\nimport React, { useState } from \"react\";\n\n// !!! CRITICAL: PASTE YOUR DEPLOYED GOOGLE APPS SCRIPT WEB APP URL HERE !!!\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APPS_SCRIPT_URL = \"YOUR_GOOGLE_APPS_SCRIPT_WEB_APP_URL_HERE\"; // <-- REPLACE THIS\n\n/**\r\n * Authentication Component for Login/Register using Google Apps Script as backend.\r\n * It sends an 'action' (login/register), email, and password to the Apps Script endpoint.\r\n * @param {object} props - Component props.\r\n * @param {function} props.onLogin - Callback function to execute upon successful login.\r\n */\nexport default function Auth({\n  onLogin\n}) {\n  _s();\n  const [isLogin, setIsLogin] = useState(true); // Toggle between Login and Register views\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(null); // { type: 'success' | 'error', text: '...' }\n\n  const action = isLogin ? \"login\" : \"register\";\n  const formTitle = isLogin ? \"Login\" : \"Register\";\n\n  // Utility for robust API calls with exponential backoff\n  const fetchWithRetry = async (url, options, retries = 3) => {\n    for (let i = 0; i < retries; i++) {\n      try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n          // Check for non-200 status codes\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response;\n      } catch (error) {\n        if (i < retries - 1) {\n          // Retry logic (1s, 2s, 4s delay)\n          const delay = Math.pow(2, i) * 1000;\n          await new Promise(resolve => setTimeout(resolve, delay));\n          console.warn(`Retry ${i + 1} for ${action} failed. Retrying in ${delay / 1000}s...`);\n        } else {\n          // Re-throw the error after final attempt\n          throw error;\n        }\n      }\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage(null);\n    setIsLoading(true);\n    if (APPS_SCRIPT_URL === \"YOUR_GOOGLE_APPS_SCRIPT_WEB_APP_URL_HERE\") {\n      setMessage({\n        type: 'error',\n        text: \"ERROR: Please update APPS_SCRIPT_URL in Auth.js with your deployed Apps Script URL.\"\n      });\n      setIsLoading(false);\n      return;\n    }\n    try {\n      const response = await fetchWithRetry(APPS_SCRIPT_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n          // Note: GAS handles CORS, but setting content type is important\n        },\n        body: JSON.stringify({\n          action: action,\n          email: email,\n          password: password\n        })\n      });\n      const result = await response.json();\n      if (result.success) {\n        setMessage({\n          type: 'success',\n          text: result.message\n        });\n        // Transition to logged-in state after a short delay\n        setTimeout(() => onLogin(email), 1500);\n      } else {\n        setMessage({\n          type: 'error',\n          text: result.message || `An unknown error occurred during ${action}.`\n        });\n      }\n    } catch (error) {\n      console.error(`Error during ${action}:`, error);\n      setMessage({\n        type: 'error',\n        text: `Network or Apps Script access error. Check console. (${error.message})`\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card auth-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title center\",\n        children: [formTitle, \" to use the App\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `api-message ${message.type === 'error' ? 'error' : 'success'}`,\n        children: message.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"text-input\",\n          type: \"email\",\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"text-input\",\n          type: \"password\",\n          placeholder: \"Password (Must be 6+ chars)\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          minLength: \"6\",\n          required: true,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn primary full-width\",\n          disabled: isLoading,\n          children: isLoading ? \"Processing...\" : formTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"switch-auth center\",\n        children: [isLogin ? \"Need an account?\" : \"Already have an account?\", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"link-button\",\n          onClick: () => {\n            setIsLogin(!isLogin);\n            setMessage(null); // Clear message on switch\n          },\n          type: \"button\",\n          disabled: isLoading,\n          children: isLogin ? \"Register\" : \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"hint center mt-1\",\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Authentication uses Google Apps Script as the backend API.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(Auth, \"0CyeADs6OANBglfZObWT2vMzZrE=\");\n_c = Auth;\nvar _c;\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","APPS_SCRIPT_URL","Auth","onLogin","_s","isLogin","setIsLogin","email","setEmail","password","setPassword","isLoading","setIsLoading","message","setMessage","action","formTitle","fetchWithRetry","url","options","retries","i","response","fetch","ok","Error","status","error","delay","Math","pow","Promise","resolve","setTimeout","console","warn","handleSubmit","e","preventDefault","type","text","method","headers","body","JSON","stringify","result","json","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","value","onChange","target","required","disabled","minLength","onClick","_c","$RefreshReg$"],"sources":["C:/Users/smscp/Desktop/PESU 5th sem Project/SE project/src/Auth.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n\r\n// /**\r\n//  * Dummy Authentication Component for Login/Register.\r\n//  * @param {object} props - Component props.\r\n//  * @param {function} props.onLogin - Callback function to execute upon successful dummy login.\r\n//  */\r\n// export default function Auth({ onLogin }) {\r\n//   const [isLogin, setIsLogin] = useState(true); // Toggle between Login and Register views\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     // Dummy authentication logic: simply checks if fields are non-empty.\r\n//     // In a real application, this would involve API calls.\r\n//     if (email.trim() && password.trim()) {\r\n//       alert(isLogin ? \"Dummy Login Successful!\" : \"Dummy Registration Successful!\");\r\n//       // Simulate successful authentication and call the onLogin handler.\r\n//       onLogin(email); \r\n//     } else {\r\n//       alert(\"Please enter both email and password.\");\r\n//     }\r\n//   };\r\n\r\n//   const formTitle = isLogin ? \"Login\" : \"Register\";\r\n\r\n//   return (\r\n//     <div className=\"auth-container\">\r\n//       <div className=\"card auth-card\">\r\n//         <h2 className=\"section-title center\">{formTitle} to use Resume Analyzer</h2>\r\n//         <form onSubmit={handleSubmit}>\r\n//           <input\r\n//             className=\"text-input\"\r\n//             type=\"email\"\r\n//             placeholder=\"Email\"\r\n//             value={email}\r\n//             onChange={(e) => setEmail(e.target.value)}\r\n//             required\r\n//           />\r\n//           <input\r\n//             className=\"text-input\"\r\n//             type=\"password\"\r\n//             placeholder=\"Password (DRA-SR-003: Strong required)\"\r\n//             value={password}\r\n//             onChange={(e) => setPassword(e.target.value)}\r\n//             required\r\n//           />\r\n//           <button type=\"submit\" className=\"btn primary full-width\">\r\n//             {formTitle}\r\n//           </button>\r\n//         </form>\r\n//         <div className=\"switch-auth center\">\r\n//           {isLogin ? \"Need an account?\" : \"Already have an account?\"}\r\n//           <button className=\"link-button\" onClick={() => setIsLogin(!isLogin)} type=\"button\">\r\n//             {isLogin ? \"Register\" : \"Login\"}\r\n//           </button>\r\n//         </div>\r\n//         <p className=\"hint center mt-1\">\r\n//           <small>\r\n//             Authentication required for data security (DRA-SR-003). All data is dummy/local for this frontend demo.\r\n//           </small>\r\n//         </p>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// // Add necessary CSS for Auth.js to App.css (see section 4)\r\nimport React, { useState } from \"react\";\r\n\r\n// !!! CRITICAL: PASTE YOUR DEPLOYED GOOGLE APPS SCRIPT WEB APP URL HERE !!!\r\nconst APPS_SCRIPT_URL = \"YOUR_GOOGLE_APPS_SCRIPT_WEB_APP_URL_HERE\"; // <-- REPLACE THIS\r\n\r\n/**\r\n * Authentication Component for Login/Register using Google Apps Script as backend.\r\n * It sends an 'action' (login/register), email, and password to the Apps Script endpoint.\r\n * @param {object} props - Component props.\r\n * @param {function} props.onLogin - Callback function to execute upon successful login.\r\n */\r\nexport default function Auth({ onLogin }) {\r\n  const [isLogin, setIsLogin] = useState(true); // Toggle between Login and Register views\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [message, setMessage] = useState(null); // { type: 'success' | 'error', text: '...' }\r\n\r\n  const action = isLogin ? \"login\" : \"register\";\r\n  const formTitle = isLogin ? \"Login\" : \"Register\";\r\n\r\n  // Utility for robust API calls with exponential backoff\r\n  const fetchWithRetry = async (url, options, retries = 3) => {\r\n    for (let i = 0; i < retries; i++) {\r\n      try {\r\n        const response = await fetch(url, options);\r\n        if (!response.ok) {\r\n            // Check for non-200 status codes\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        return response;\r\n      } catch (error) {\r\n        if (i < retries - 1) {\r\n          // Retry logic (1s, 2s, 4s delay)\r\n          const delay = Math.pow(2, i) * 1000;\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n          console.warn(`Retry ${i + 1} for ${action} failed. Retrying in ${delay / 1000}s...`);\r\n        } else {\r\n          // Re-throw the error after final attempt\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setMessage(null);\r\n    setIsLoading(true);\r\n\r\n    if (APPS_SCRIPT_URL === \"YOUR_GOOGLE_APPS_SCRIPT_WEB_APP_URL_HERE\") {\r\n      setMessage({ type: 'error', text: \"ERROR: Please update APPS_SCRIPT_URL in Auth.js with your deployed Apps Script URL.\" });\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetchWithRetry(APPS_SCRIPT_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            // Note: GAS handles CORS, but setting content type is important\r\n        },\r\n        body: JSON.stringify({\r\n            action: action,\r\n            email: email,\r\n            password: password\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        setMessage({ type: 'success', text: result.message });\r\n        // Transition to logged-in state after a short delay\r\n        setTimeout(() => onLogin(email), 1500); \r\n      } else {\r\n        setMessage({ type: 'error', text: result.message || `An unknown error occurred during ${action}.` });\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error(`Error during ${action}:`, error);\r\n      setMessage({ type: 'error', text: `Network or Apps Script access error. Check console. (${error.message})` });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-container\">\r\n      <div className=\"card auth-card\">\r\n        <h2 className=\"section-title center\">{formTitle} to use the App</h2>\r\n        \r\n        {/* API Message Display */}\r\n        {message && (\r\n          <div className={`api-message ${message.type === 'error' ? 'error' : 'success'}`}>\r\n            {message.text}\r\n          </div>\r\n        )}\r\n\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            className=\"text-input\"\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            required\r\n            disabled={isLoading}\r\n          />\r\n          <input\r\n            className=\"text-input\"\r\n            type=\"password\"\r\n            placeholder=\"Password (Must be 6+ chars)\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            minLength=\"6\"\r\n            required\r\n            disabled={isLoading}\r\n          />\r\n          <button type=\"submit\" className=\"btn primary full-width\" disabled={isLoading}>\r\n            {isLoading ? \"Processing...\" : formTitle}\r\n          </button>\r\n        </form>\r\n        \r\n        <div className=\"switch-auth center\">\r\n          {isLogin ? \"Need an account?\" : \"Already have an account?\"}\r\n          <button \r\n            className=\"link-button\" \r\n            onClick={() => {\r\n                setIsLogin(!isLogin);\r\n                setMessage(null); // Clear message on switch\r\n            }} \r\n            type=\"button\"\r\n            disabled={isLoading}\r\n          >\r\n            {isLogin ? \"Register\" : \"Login\"}\r\n          </button>\r\n        </div>\r\n        <p className=\"hint center mt-1\">\r\n          <small>\r\n            Authentication uses Google Apps Script as the backend API.\r\n          </small>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}